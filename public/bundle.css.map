{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "CreateMenu.svelte",
    "DirTopMenu.svelte",
    "FileDir.svelte",
    "FileTest.svelte",
    "Editor.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n    import FileDir from './Directory/FileDir.svelte'\r\n    import XTerm from './XTerm.svelte';\r\n    import Editor from './MonacoComponents/Editor.svelte';\r\n    import StateManager from './StateManager/StateManager.svelte'\r\n    export let orientation = 'columns';\r\n    export let localhost;\r\n\r\n    let value = \"\"\r\n\t  let submit = false\r\n  \r\n\t\r\n\tconst handleSubmit = () => {\r\n\t\tsubmit = false\r\n    return false\r\n\t}\r\n\t\r\n\tconst handleKeyup = () => {\r\n\t\tsubmit = false\r\n\t\t\r\n\t\tif (event.code == 'Enter') {\r\n\t\t\tevent.preventDefault()\r\n\t\t\tevent.target.value\r\n\t\t\tvalue = event.target.value\r\n      localhost = `http://127.0.0.1:${value}/`\r\n\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\r\n  </script>\r\n  \r\n  <style>\r\n  \r\n  body {\r\n    height: 100%;\r\n    width: 100%;\r\n  }\r\n\r\n  .wrapper {\r\n      height: 100%;\r\n      display: grid;\r\n      border: 1px solid rgb(226, 142, 45);\r\n      grid-template-columns: min-content;\r\n      grid-template-rows: 1fr;\r\n      background-color: rgb(39, 38, 38);\r\n      color: #444;\r\n  }\r\n  \r\n  .box {\r\n    background-color: rgb(39, 38, 38);\r\n    border: 1px solid rgb(226, 142, 45);\r\n    color: rgb(226, 142, 45);\r\n    border-radius: 0px;\r\n    padding: 10px;\r\n    font-size: 150%;\r\n  }\r\n\r\n  .a {\r\n    overflow: auto;\r\n    resize: horizontal;\r\n    min-width: 15%;\r\n    max-width: 150%;\r\n    min-height: 10%;\r\n    max-height: 150%;\r\n    grid-column: 1 ;\r\n    grid-row: 1;\r\n  }\r\n  \r\n  .b {\r\n    overflow: scroll;\r\n    min-width: 10%;\r\n    max-width: 150%;\r\n    min-height: 10%;\r\n    max-height: 150%;\r\n    grid-column: 2;\r\n    grid-row: 1;\r\n  }\r\n\r\n  .c {\r\n    overflow: auto;\r\n    min-width: 10%;\r\n    max-width: 150%;\r\n    min-height: 10%;\r\n    max-height: 150%;\r\n    grid-column: 1 ;\r\n    grid-row: 2 ;\r\n  }\r\n  \r\n  .d {\r\n    overflow: auto;\r\n    resize: vertical;\r\n    min-width: 10%;\r\n    min-height: 10%;\r\n    max-height: 150%;\r\n    padding: 0px;\r\n    text-align: center;\r\n    grid-column: 3;\r\n    grid-row: 1;\r\n  }\r\n\r\n  .d input {\r\n    margin: auto;\r\n    margin-top: 0;\r\n    margin-bottom: 0;\r\n    height: 20px;\r\n    font-size: 15px;\r\n  }\r\n  \r\n  .e {\r\n    overflow: auto;\r\n    min-width: 10%;\r\n    max-width: 150%;\r\n    min-height: 100%;\r\n    grid-column: 2 / 4;\r\n    grid-row: 2;\r\n  }\r\n  \r\n  .webpage {\r\n    height: 90%;\r\n    width: 95%;\r\n  }\r\n\r\n  .b :global(.childClass) {\r\n    overflow: scroll;\r\n    display: flex;\r\n    height: 100%;\r\n    width: 100%;\r\n  }\r\n\r\n  iframe:focus {\r\n    outline: none;\r\n  }\r\n\r\n</style>\r\n  <body class:orientation>\r\n  <main class=\"wrapper\" >\r\n    \r\n      <div class=\"box a target\">\r\n          <FileDir />\r\n      </div>\r\n      <div class=\"box b\">\r\n          <!-- svelte-ignore missing-declaration -->\r\n          <Editor class=\"childClass\" />\r\n      </div>\r\n      <div class=\"box c root\">\r\n        <StateManager />\r\n      </div>\r\n      <div class=\"box d root\"> \r\n        <form on:submit|preventDefault={handleSubmit}>\r\n          <input placeholder=\"Local Host Port\" type=\"text\" on:keyup|preventDefault={handleKeyup}>\r\n        </form>\r\n        {#if submit === true} \r\n          <iframe  class=\"webpage\" title=\"local host\" src={localhost}></iframe>\r\n        {/if}\r\n          <iframe  class=\"webpage\" title=\"local host\" src={localhost}></iframe>\r\n        </div>\r\n      <div class=\"box e\"> \r\n          <XTerm />\r\n      </div>\r\n\r\n  </main>\r\n  </body>\r\n\r\n\r\n\r\n",
    "<script>\r\n  export let filePath;\r\n  import { DirectoryData } from '../Utilities/DirectoryStore';\r\n  const fs = require('fs');\r\n  let fileStat = fs.statSync(filePath)\r\n  \r\n  \r\n\r\n  const unsub = DirectoryData.subscribe(data =>{\r\n  });\r\n\r\n  const renameHandler = () => {\r\n    DirectoryData.update( currentData => {\r\n      return {...currentData, rename :true};\r\n    })\r\n  }\r\n\r\n  const deleteHandler = () => {   \r\n    let stats = fs.statSync(filePath); \r\n    if(stats.isFile()){\r\n      fs.unlinkSync(filePath);\r\n    }\r\n\r\n    if(stats.isDirectory()) {\r\n      fs.rmdir(filePath, { recursive: true }, (err) => {\r\n        if (err) {\r\n          throw err;\r\n        }\r\n      });\r\n    }\r\n    \r\n    DirectoryData.update( currentData => {\r\n      return {...currentData, deleteFile:true};        \r\n    })\r\n  }\r\n\r\n  const createFileHandler = () => {\r\n    DirectoryData.update( currentData => {\r\n      return {...currentData, createFile :true, activeFile:''};\r\n    })\r\n  }\r\n\r\n  const createFolderHandler = () => {\r\n    DirectoryData.update( currentData => {\r\n      return {...currentData, createFolder :true, activeFile:''};\r\n    })\r\n  }\r\n\r\n</script>\r\n\r\n<!-- Svelte -->\r\n<div class=createMenuWrapper>\r\n  {#if fileStat.isFile()}\r\n    <p class='items' on:click={renameHandler}>Rename</p>\r\n    <p class='items'on:click={deleteHandler}>Delete</p>\r\n  {/if}\r\n  {#if fileStat.isDirectory()}\r\n    <p  class='items' on:click={createFileHandler}>New File</p>\r\n    <p  class='items' on:click={createFolderHandler}>New Folder</p>\r\n    <p  class='items' on:click={renameHandler}>Rename</p>\r\n    <p  class='items' on:click={deleteHandler}>Delete</p>    \r\n  {/if}\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n<!-- Style -->\r\n<style>\r\n.createMenuWrapper{\r\n  background-color: rgb(126, 107, 89);\r\n  color: rgb(238, 227, 221);\r\n  font-size: 15px;\r\n  width:100px;\r\n  height: auto;\r\n  padding: 10px 10px 10px 10px;\r\n}\r\n\r\n.items:hover {\r\n  color: rgb(250, 198, 164);\r\n  cursor: pointer;\r\n}\r\n</style>\r\n",
    "<script>\r\n  import { DirectoryData } from '../Utilities/DirectoryStore';\r\n  const fs = require('fs');\r\n  let mainDir = '';\r\n  let createMainFile= false;\r\n  let createMainFolder = false;\r\n  let reload = false;\r\n  let newName = '';\r\n  let fileState = {}\r\n  let fileName;\r\n  const unsub = DirectoryData.subscribe(data =>{\r\n      mainDir = data.mainDir;\r\n      reload = data.reload; \r\n      createMainFile = data.createMainFile;\r\n      createMainFolder = data.createMainFolder;\r\n      fileState = data.fileState;\r\n  });\r\n  const refreshDir = () => {\r\n    console.log('clickig now');\r\n    DirectoryData.update( currentData => {\r\n      return {\r\n        ...currentData, \r\n        reload: true\r\n      };\r\n    })\r\n  }\r\n  const addFolder = () => {\r\n    console.log('clicking addFolder');\r\n    DirectoryData.update( currentData => {\r\n      return {\r\n        ...currentData, \r\n        createMainFolder: true,\r\n        activeFile: ''\r\n      };\r\n    })\r\n  }\r\n  const addFile = () => {\r\n    console.log('clicking addFile');\r\n    DirectoryData.update( currentData => {\r\n      return {\r\n        ...currentData, \r\n        createMainFile: true,\r\n        activeFile: ''\r\n      };\r\n    })\r\n  }\r\n  const createFileHandler = (e,path) => {\r\n    DirectoryData.update( currentData => {\r\n      return {\r\n      ...currentData, \r\n      activeDir: path,\r\n      activeFile: '',   \r\n      };\r\n     })\r\n    if(e.key !== 'Enter') return;\r\n       \r\n    newName = e.target.value;      \r\n    \r\n    fs.writeFileSync(path+'/'+newName, '', (err) => {\r\n      if(err) throw err;        \r\n    });\r\n    DirectoryData.update( currentData => {\r\n      return {\r\n      ...currentData,         \r\n      createMainFile: false,\r\n      rename:false, \r\n      activeFile: '',\r\n      };\r\n    })      \r\n    \r\n    newName = '';\r\n  }\r\n  const createFolderHandler = (e,path) => {\r\n    DirectoryData.update( currentData => {\r\n      return {\r\n      ...currentData, \r\n      activeDir: path,\r\n      activeFile: '',   \r\n      };\r\n     })\r\n    if(e.key !== 'Enter') return;\r\n    \r\n    try {\r\n      if (!fs.existsSync(path+'/'+newName)) {\r\n        fs.mkdirSync(path+'/'+newName)\r\n    }\r\n    } catch (err) {\r\n      console.error(err)\r\n    }\r\n    DirectoryData.update( currentData => {\r\n      return {\r\n      ...currentData,         \r\n      createMainFolder: false,\r\n      rename:false, \r\n      activeFile: '',\r\n      };\r\n    })   \r\n    \r\n    newName = '';\r\n    \r\n  }\r\n  const resetStatus = () => {\r\n    DirectoryData.update( currentData => {\r\n        return {\r\n        ...currentData,         \r\n        createMainFolder: false,\r\n        createMainFile:false,\r\n        };\r\n      })   \r\n  }\r\n</script>\r\n  <div class='fileMenu'>\r\n    <div class='fileArea' on:click={createMainFile || createMainFolder ? resetStatus : undefined}>{process.platform === \"win32\" ?  mainDir.substring(mainDir.lastIndexOf('\\\\')+1) : mainDir.substring(mainDir.lastIndexOf('/')+1)}</div>\r\n    <div class='refresh' on:click={refreshDir}></div>\r\n    <div class='addFile' on:click = {addFile}></div>\r\n    <div class='addFolder'on:click = {addFolder}></div>    \r\n  </div>\r\n  {#if createMainFile}\r\n    <span>      \r\n      <input \r\n        class='textBox'\r\n        bind:this={fileName}\r\n        on:keydown={(e) => createFileHandler(e,mainDir)} \r\n        bind:value={newName}\r\n        placeholder='New File Name'\r\n        type=\"text\"/>      \r\n    </span>\r\n  {/if}\r\n\r\n  {#if createMainFolder}\r\n    <span>\r\n      <input \r\n        class='textBox'\r\n        bind:this={fileName}\r\n        on:keydown={(e) => createFolderHandler(e,mainDir)} \r\n        bind:value={newName}\r\n        placeholder='New File Name'\r\n        type=\"text\"/>\r\n    </span>\r\n  {/if}\r\n\r\n\r\n<style>\r\n  .fileMenu {\r\n    background-color: rgb(248, 200, 152);\r\n  }\r\n  .fileArea {    \r\n    float: left;    \r\n    height: 20px;\r\n    font-size: 14px;\r\n    color: white;\r\n  }\r\n  .refresh {\r\n    float: right;\r\n    background-image: url('./img/refresh.png');\r\n    height: 20px;    \r\n    width: 20px;\r\n    background-repeat: no-repeat;\r\n    background-size: 20px;\r\n  }\r\n  .addFile {\r\n    float: right;\r\n    background-image: url('./img/addFile.png');\r\n    height: 20px;\r\n    width: 20px;\r\n    background-repeat: no-repeat;\r\n    background-size: 20px;\r\n    margin-right: 5px;\r\n  }\r\n  .addFolder {\r\n    float: right;\r\n    background-image: url('./img/addFolder.png');\r\n    height: 20px;\r\n    width: 20px;\r\n    background-repeat: no-repeat;\r\n    background-size: 20px;\r\n    margin-right: 5px;\r\n  }\r\n  .textBox {\r\n    margin-left: 10px;\r\n    padding: 10px 10px 10px 10px;\r\n    font-size: 14px;\r\n    width: 150px;    \r\n  }\r\n</style>",
    "<script>  \r\n    import FileTest from './FileTest.svelte';  \r\n    import DirTopMenu from './DirTopMenu.svelte'  \r\n    import { onMount, onDestroy, afterUpdate} from 'svelte';\r\n    import { DirectoryData } from '../Utilities/DirectoryStore';\r\n\r\n\r\n    const fs = require('fs');\r\n    let savedTree = [];\r\n    var remote = window.require('electron').remote;\r\n    var electronFs = remote.require('fs');\r\n    const {ipcRenderer} = require('electron');\r\n\r\n    \r\n    let directory;\r\n    let rename;\r\n    let stateObj = {};\r\n    let resultArr = [];\r\n    let fsTimeout;\r\n    export let activeDir = '';\r\n    let mainDir = '';\r\n    export let reload = false;\r\n \r\n  \r\n  const unsub = DirectoryData.subscribe(data =>{\r\n    rename = data.rename;      \r\n    activeDir = data.activeDir;\r\n    mainDir = data.mainDir;\r\n    reload = data.reload;\r\n    \r\n  });\r\n  // store \r\n  onMount (()=>{\r\n  \r\n  });\r\n  afterUpdate(() => {\r\n    if(reload){\r\n      console.log('reloading now')\r\n      readFileNames(directory);\r\n      DirectoryData.update(currentData =>{\r\n        return {\r\n            ...currentData,\r\n            reload: false\r\n        }\r\n      })\r\n    }\r\n    if(activeDir) {              \r\n      fs.watch(activeDir, (eventType, filename) => {\r\n        console.log('directory',directory)\r\n        if(eventType === 'rename' && !fsTimeout){  \r\n          readFileNames(mainDir);              \r\n        }\r\n        if(!fsTimeout){\r\n          fsTimeout = setTimeout(function() { fsTimeout=null }, 3000);\r\n        }        \r\n      });\r\n    }    \r\n  });\r\n\r\n  onDestroy(()=>{\r\n      unsub();\r\n  });\r\n  ipcRenderer.on('folder-opened', function (evt, file, content) {\r\n    directory = Array.isArray(content) ? content[0] : content;      \r\n    console.log('directory',directory)\r\n    if(directory) {       \r\n      fs.readdir(directory, (error,files) => {          \r\n        if (files.length){\r\n          var fileTree = new FileTree(directory);        \r\n          fileTree.build();                \r\n          savedTree = fileTree.items;\r\n          savedTree.sort((a,b) => {\r\n            return (fs.statSync(a.path).isDirectory() === fs.statSync(b.path).isDirectory() ? 0 : fs.statSync(a.path).isDirectory() ? -1 : 1)\r\n          })\r\n          DirectoryData.update(currentData =>{\r\n            return {\r\n                ...currentData,\r\n                fileTree: savedTree,\r\n                currentDir: directory,\r\n                mainDir: directory              \r\n            }\r\n          })\r\n        }\r\n        else {\r\n          DirectoryData.update(currentData =>{\r\n            return {\r\n                ...currentData,                  \r\n                activeDir: directory,\r\n                mainDir: directory\r\n            }\r\n          })\r\n        }\r\n      })\r\n      \r\n    }      \r\n  });\r\n  \r\n  \r\n  //method to read all the files inside the directory\r\n  const readFileNames = (mainDir) => {\r\n    if(mainDir) {       \r\n      var fileTree = new FileTree(mainDir);        \r\n      fileTree.build();                \r\n      savedTree = fileTree.items;\r\n      savedTree.sort((a,b) => {\r\n        return (fs.statSync(a.path).isDirectory() === fs.statSync(b.path).isDirectory() ? 0 : fs.statSync(a.path).isDirectory() ? -1 : 1)\r\n      })\r\n      \r\n      DirectoryData.update(currentData =>{\r\n        return {\r\n            ...currentData,\r\n            fileTree: savedTree,              \r\n        }\r\n      })\r\n    }\r\n       \r\n    \r\n    \r\n  }\r\n  \r\n  class FileTree {\r\n    constructor(path, name = null){        \r\n      this.path = path;\r\n      this.name = name;\r\n      this.items = [];\r\n      this.state = {\r\n          path : path,\r\n          name: name,\r\n          items: [],\r\n          color : 'white',\r\n          isOpen : false\r\n      }   \r\n    }\r\n  //method to build file tree\r\n    build () {\r\n      this.items = FileTree.readDir(this.path,'',0);\r\n    }\r\n    static readDir(path) {\r\n      var fileArray = [];        \r\n      \r\n      electronFs.readdirSync(path).forEach(file => {\r\n        var fileInfo = new FileTree(`${path}/${file}`, file);\r\n        var stat = electronFs.statSync(fileInfo.path);\r\n        if (file.split('.').pop() === 'svelte'){\r\n          //console.log(`${path}/${file}`)\r\n          if(path.includes('node_modules') !== true) {\r\n            var content = fs.readFileSync(`${path}/${file}`).toString();                    \r\n            var stateArr = [];\r\n            var value = content.split(/\\r?\\n/);\r\n            if(value !==[\"\"]) {\r\n              value.forEach( el => {\r\n                if(el && el.includes('export')) {                       \r\n                  el = el.replace(/\\s/g, '');\r\n                  if(el.includes('exportlet')) {\r\n                    el = el.replace('exportlet','');\r\n                    stateArr.push(el.replace(';',''));\r\n                  }\r\n                  if(el.includes('exportconst')) {\r\n                    el = el.replace('exportconst','');\r\n                    stateArr.push(el.replace(';',''));\r\n                  }\r\n                               \r\n                  stateObj[file] = stateArr;                                 \r\n                }\r\n                DirectoryData.update(currentData =>{\r\n                  return {\r\n                    ...currentData,\r\n                      stateObj: stateObj\r\n                  };\r\n                })                        \r\n                      \r\n              })\r\n            }                \r\n          }                \r\n        }\r\n        if (stat.isDirectory()){\r\n          fileInfo.items = FileTree.readDir(fileInfo.path);\r\n        }\r\n        fileArray.push(fileInfo);\r\n      })   \r\n    return fileArray;\r\n    }\r\n  }\r\n</script>\r\n\r\n<!-- HTML -->\r\n\r\n<div class=directoryContainer>\r\n  <DirTopMenu></DirTopMenu>\r\n  {#if directory}     \r\n  <FileTest directory={mainDir} fileTree={savedTree} />\r\n  {/if}\r\n</div>\r\n<!-- CSS -->\r\n<style>\r\n.directoryContainer{\r\n    max-height: 50vh;\r\n    overflow-y: scroll;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-content: flex-start;\r\n}\r\n.directoryContainer::-webkit-scrollbar {\r\nwidth: 12px;\r\n}\r\n.directoryContainer::-webkit-scrollbar-thumb:hover {\r\n    background-color: #e28e2d;\r\n    transition: background-color 2s ease-in-out;\r\n}\r\n\r\n</style>",
    "<script>\r\n  export let fileTree;\r\n  import { DirectoryData } from '../Utilities/DirectoryStore';\r\n  import CreateMenu from './CreateMenu.svelte';\r\n  const fs = require('fs');\r\n  const fileState = {};\r\n  let rename = false;\r\n  let deleteFile = false;\r\n  let rightClickStatus = false;\r\n  let activeFile = '';\r\n  let newName = '';\r\n  let createFile= false;\r\n  let createFolder = false;\r\n  let activeDir = '';\r\n  let activeFolder = '';\r\n  let fileName;\r\n  \r\n    \r\n  const unsub = DirectoryData.subscribe(data =>{\r\n    activeFile = data.activeFile;\r\n    rename = data.rename;\r\n    createFile = data.createFile;\r\n    createFolder = data.createFolder; \r\n    activeDir = data.activeDir;     \r\n    activeFolder = data.activeFolder;      \r\n  });\r\n\r\n  const toggleVisibility = (path) => {\r\n    if(!fileState[path]) fileState[path]= true;\r\n    else fileState[path] = false;\r\n  }\r\n\r\n\r\n  const dblClickHandler = (path) => {\r\n    const openFilePath = path;      \r\n    DirectoryData.update(currentData =>{\r\n      return {\r\n        ...currentData,\r\n        openFilePath,\r\n        fileRead:true};\r\n    })\r\n  }\r\n\r\n  const rightClickHandler = (path) => {    \r\n    const openFilePath = path;\r\n    const fullPath = path.substring(0, path.lastIndexOf('/'));      \r\n    DirectoryData.update(currentData =>{\r\n      return {\r\n        ...currentData, \r\n        activeFile: openFilePath, \r\n        rename: false,\r\n        activeDir:fullPath,\r\n        activeFolder: path\r\n      };\r\n    })  \r\n\r\n  }\r\n\r\n  const renameHandler = (e,path) => {\r\n    if (e.key !== 'Enter') return;    \r\n    \r\n    const fullPath = path.substring(0, path.lastIndexOf('/'));\r\n    fs.renameSync(path, fullPath+'/'+newName);\r\n    DirectoryData.update( currentData => {\r\n      return {\r\n      ...currentData, \r\n      rename:false, \r\n      activeFile: '',\r\n      activeDir: fullPath\r\n      };\r\n    })\r\n    \r\n    newName = '';  \r\n    \r\n  }\r\n\r\n  const createFileHandler = (e,path) => {\r\n    DirectoryData.update( currentData => {\r\n      return {\r\n      ...currentData, \r\n      activeDir: path,\r\n      activeFile: '',   \r\n      };\r\n     })\r\n    \r\n    if (e.key !== 'Enter') return;          \r\n    \r\n    fs.writeFileSync(path+'/'+newName, '', (err) => {\r\n      if(err) throw err;        \r\n    })\r\n    DirectoryData.update( currentData => {\r\n      return {\r\n      ...currentData,         \r\n      createFile: false,\r\n      rename:false, \r\n      activeFile: '',\r\n      };\r\n    })\r\n\r\n    fileState[path]= true;\r\n    newName = '';\r\n      \r\n    \r\n  }\r\n\r\n  const createFolderHandler = (e,path) => {\r\n    DirectoryData.update( currentData => {\r\n      return {\r\n      ...currentData, \r\n      activeDir: path,\r\n      activeFile: '',   \r\n      };\r\n     })\r\n\r\n    if (e.key !== 'Enter') return;  \r\n         \r\n    \r\n    try {\r\n      if (!fs.existsSync(path+'/'+newName)) {\r\n        fs.mkdirSync(path+'/'+newName)\r\n      }\r\n    } catch (err) {\r\n      console.error(err)\r\n    }\r\n    DirectoryData.update( currentData => {\r\n      return {\r\n      ...currentData,         \r\n      createFolder: false,\r\n      rename:false, \r\n      activeFile: '',\r\n      };\r\n    })\r\n    fileState[path]= true;\r\n    newName = '';\r\n    \r\n  }\r\n\r\n  const resetRename = () => {\r\n    DirectoryData.update( currentData => {\r\n      return {\r\n        ...currentData, \r\n        rename: false, \r\n        activeFile: '',\r\n        createFile: false,\r\n        createFolder:false\r\n      };\r\n    })\r\n  }\r\n\r\n</script>\r\n\r\n\r\n<!-- Components -->\r\n<div class=directory >\r\n  {#if fileTree}\r\n    {#each fileTree as {path,name, items}}\r\n    <ul>\r\n      {#if fs.statSync(path).isDirectory()}        \r\n        {#if rename && activeFile === path}\r\n          <span>\r\n            <input \r\n            class='textBox'\r\n            bind:this={fileName}\r\n            on:keydown={(e) => renameHandler(e,path)} \r\n            bind:value={newName}\r\n            placeholder={name}\r\n            type=\"text\"/>\r\n          </span>\r\n        {:else}\r\n          <li on:click={toggleVisibility(path)} class={!fileState[path] ? \"liFolderClosed\" : \"liFolderOpen\"} on:contextmenu|preventDefault=\"{rightClickHandler(path)}\" \r\n          on:click={activeFile || createFile || createFolder ? resetRename : undefined}>{name}</li>\r\n          {#if activeFolder === path && createFile}\r\n          <span>\r\n            <input \r\n            class='textBox'\r\n            bind:this={fileName}\r\n            on:keydown={(e) => createFileHandler(e,path)} \r\n            bind:value={newName}\r\n            placeholder='New File Name'\r\n            type=\"text\"/>\r\n          </span>\r\n        {/if}\r\n        {#if activeFolder === path && createFolder}\r\n          <span>\r\n            <input \r\n            class='textBox'\r\n            bind:this={fileName}\r\n            on:keydown={(e) => createFolderHandler(e,path)} \r\n            bind:value={newName}\r\n            placeholder='New Folder Name'\r\n            type=\"text\"/>\r\n          </span>\r\n        {/if}\r\n          {#if activeFile === path}\r\n          <CreateMenu filePath={path} />\r\n          {/if}\r\n        {/if}             \r\n      {:else}        \r\n        {#if rename && activeFile === path}\r\n          <span>\r\n            <input \r\n            class=\"textBox\"   \r\n            bind:this={fileName}         \r\n            on:keydown={(e) => renameHandler(e,path)} \r\n            bind:value={newName}\r\n            placeholder={name}\r\n            type=\"text\"/>\r\n          </span>\r\n        {:else}\r\n          <li  on:contextmenu|preventDefault=\"{rightClickHandler(path)}\" on:dblclick={dblClickHandler(path)} class=\"liFiles\" on:click={activeFile ? resetRename : undefined}>{name} </li>\r\n          {#if activeFile === path}\r\n              <CreateMenu filePath={path} />\r\n          {/if}\r\n        {/if}\r\n      {/if}\r\n\r\n      {#if fileState[path] && fs.statSync(path).isDirectory()}      \r\n        <svelte:self fileTree={items.sort((a,b) => {\r\n          return (fs.statSync(a.path).isDirectory() === fs.statSync(b.path).isDirectory() ? 0 : fs.statSync(a.path).isDirectory() ? -1 : 1)\r\n        })}/>\r\n      {/if}\r\n    </ul>\r\n    {/each}\r\n  {/if}\r\n</div>\r\n\r\n<!-- CSS Styling -->\r\n<style>    \r\n  .liFolderClosed {\r\n    font-size: 15px;\r\n    cursor: pointer;\r\n    padding: 0px 0 5px 25px;\r\n    list-style: none;\r\n    background-image: url(\"./img/folderClosed.svg\");\r\n    background-repeat: no-repeat;\r\n    background-position: left;\r\n    background-size: 15px;   \r\n  }\r\n\r\n  .liFolderOpen {\r\n    font-size: 15px;\r\n    cursor: pointer;\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    padding: 10px 0 5px 25px;\r\n    list-style: none;\r\n    background-image: url('./img/folderOpen.svg');\r\n    background-repeat: no-repeat;\r\n    background-position: left;\r\n    background-size: 15px;    \r\n  }\r\n\r\n  .liFiles {\r\n    font-size: 15px;\r\n    cursor: pointer;\r\n    padding-left: 25px;\r\n    margin-left: 20px;\r\n    margin-top: 1px;\r\n    list-style: none;\r\n    background-image: url('./img/document.png');\r\n    background-repeat: no-repeat;\r\n    background-position: left;\r\n    background-size: 15px;\r\n  }\r\n  \r\n  .directory{\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-start;    \r\n  }\r\n\r\n  ul{\r\n    padding-left: 10px;\r\n    margin: 5px;\r\n  }\r\n\r\n  input{\r\n    background-color: white;\r\n  }\r\n\r\n  .textBox {\r\n    margin-left: 10px;\r\n    padding: 10px 10px 10px 10px;\r\n    font-size: 14px;\r\n    width: 150px;\r\n    \r\n  }\r\n\r\n</style>\r\n",
    "<script>\r\n  import Monaco from './Monaco.svelte';\r\n  import { DirectoryData, openTabs } from '../Utilities/DirectoryStore';\r\n\r\n  const { remote, ipcRenderer } = require('electron');\r\n  const fs = require('fs');\r\n  const path = require('path');\r\n  const currentWindow = remote.getCurrentWindow();\r\n  \r\n  export let activeTabValue = 0;\r\n  let activeEditor = 0;\r\n\r\n  let value = [''];\r\n  let language = 'html';\r\n  let [filePath, fileName, readData] = ['', '', ''];\r\n  let title = 'Svelte Storm';\r\n  let count = 0;\r\n\r\n  function addTab(newFile) {\r\n    let duplicate = false;\r\n    $openTabs.map((tab) => {\r\n      if (tab.filePath === newFile.filePath) {\r\n        duplicate = true;\r\n      }\r\n    })\r\n    if (!duplicate) {\r\n      $openTabs = [ ...$openTabs, newFile]\r\n      count = count + 1;\r\n      console.log($openTabs)\r\n    }\r\n  };\r\n\r\n  function deleteTab(targetId) {\r\n\r\n    $openTabs = $openTabs.filter((t) => t.tabId != targetId).map((t, i) => ({\r\n      editorValue: t.editorValue,\r\n      ext : t.ext,\r\n      editorLang: t.editorLang,\r\n      filePath: t.filePath,\r\n      fileName: t.fileName,\r\n      tabId: i,\r\n    }))\r\n\r\n    count = count - 1;\r\n    activeTabValue = 0;\r\n    activeEditor = activeTabValue;\r\n  }\r\n\r\n  const handleClick = (tabId) => () => {\r\n    activeTabValue = tabId;\r\n    activeEditor = activeTabValue;\r\n  }\r\n  \r\n  const getLanguage = (lang) => {\r\n      switch (lang) {\r\n        case 'js':\r\n          return 'javascript';\r\n        case 'jsx':\r\n          return 'javascript';\r\n        case 'ts':\r\n          return 'typescript';\r\n        case 'json':\r\n          return 'json';\r\n        case 'css':\r\n          return 'css';\r\n        case 'html':\r\n          return 'html';\r\n        case 'md':\r\n          return 'markdown';\r\n        case 'svelte':\r\n          return 'html';\r\n        default:\r\n          return undefined;\r\n      }\r\n  }\r\n\r\n  ipcRenderer.on('file-opened', function (evt, file, content) {\r\n      const newTab = {}\r\n      filePath = (file);\r\n      console.log(filePath)\r\n      \r\n      if(process.platform === \"win32\") {\r\n        console.log(\"win32\")\r\n        fileName = file.slice().split('\\\\').pop();\r\n      }\r\n      else {\r\n        fileName = file.slice().split('/').pop();\r\n      }\r\n     \r\n      language = file.slice().split('.').pop();\r\n      newTab.editorValue = content.split(/\\r?\\n/);\r\n      newTab.ext = language;\r\n      newTab.editorLang = getLanguage(language);\r\n      newTab.filePath = filePath;\r\n      newTab.fileName = fileName;\r\n      newTab.tabId = count;\r\n      addTab(newTab);\r\n      if (file) { title = `${path.basename(file)} - ${title}`; }\r\n  });\r\n\r\n  const unsub = DirectoryData.subscribe(data => {\r\n    console.log(data.openFilePath)\r\n    const newTab = {};\r\n      if (data.fileRead) {\r\n        readData = fs.readFileSync(data.openFilePath).toString();\r\n        value = readData.split(/\\r?\\n/);\r\n        fileName = data.openFilePath.slice().split('/').pop();\r\n        language = path.basename(data.openFilePath).split('.').pop();\r\n        if (data.openFilePath) { title = `${path.basename(data.openFilePath)} - Svelte Storm`; }\r\n        newTab.editorValue = value;\r\n        newTab.ext = language;\r\n        newTab.editorLang = getLanguage(language);\r\n        newTab.filePath = data.openFilePath;\r\n        newTab.fileName = fileName;\r\n        newTab.tabId = count;\r\n        currentWindow.setTitle(title);\r\n        addTab(newTab);\r\n      }\r\n  });\r\n\r\n</script>\r\n\r\n  <ul>\r\n    {#each $openTabs as tab}\r\n    <li class={activeTabValue === tab.tabId ? 'active' : ''}>\r\n      <span class=\"tab-span\"\r\n        on:click={handleClick(tab.tabId)}\r\n      >\r\n        <img src=\"../src/icons/file_type_{tab.ext}.svg\" \r\n          alt={''}\r\n        />\r\n        {tab.fileName}\r\n        <span\r\n          class=\"delete-button\" \r\n          value={tab.tabId}\r\n          on:click={(value) => deleteTab(tab.tabId)}\r\n        >\r\n          &times\r\n        </span>\r\n      </span>\r\n    </li>\r\n    {/each}\r\n  </ul>\r\n  \r\n  {#if $openTabs.length > 0}\r\n    <div class=\"editor-body\">\r\n        <Monaco\r\n          class=\"childClass current\"\r\n          bind:value={$openTabs[(activeEditor)].editorValue}\r\n          bind:language={$openTabs[(activeEditor)].editorLang}\r\n          bind:filePath={$openTabs[(activeEditor)].filePath}\r\n        />\r\n    </div>\r\n  {/if}\r\n\r\n<style>\r\n\r\n  .editor-body {\r\n    width: 100%;\r\n    height: 100vh;\r\n    overflow: scroll;\r\n  }\r\n\r\n  ul {\r\n    display: flex;\r\n    flex-direction: row;\r\n    overflow: scroll;\r\n    padding-left: 0;\r\n    margin-top: 0;\r\n    margin-bottom: 0;\r\n    list-style: none;\r\n    border-bottom: 1px solid #dee2e6;\r\n    border-radius: 5px;\r\n  }\r\n\r\n\tli {\r\n\t\tmargin-bottom: -1px;\r\n    background-color: black;\r\n    color: #fff;\r\n\t}\r\n\r\n  .tab-span {\r\n    border: 1px solid transparent;\r\n    border-top-left-radius: 0.25rem;\r\n    border-top-right-radius: 0.25rem;\r\n    display: flex;\r\n    flex-direction: row;\r\n    padding: 0 1rem;\r\n    cursor: pointer;\r\n    font-size: 1em;\r\n  }\r\n\r\n  .tab-span:hover {\r\n    border-color: #e9ecef #e9ecef #dee2e6;\r\n  }\r\n\r\n  li.active > span {\r\n    color: #495057;\r\n    background-color: #fff;\r\n    border-color: #dee2e6 #dee2e6 #fff;\r\n  }\r\n\r\n  img {\r\n    height: 1em;\r\n    background-color: inherit;\r\n    margin-top: 3px;\r\n    /* margin-bottom: 0; */\r\n  }\r\n  .delete-button {\r\n    margin-left: 5px;\r\n    border-right: black;\r\n    border-left: black;\r\n  }\r\n\r\n</style>\r\n"
  ],
  "names": [],
  "mappings": "AAiCE,IAAI,8BAAC,CAAC,AACJ,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,AACb,CAAC,AAED,QAAQ,8BAAC,CAAC,AACN,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CACnC,qBAAqB,CAAE,WAAW,CAClC,kBAAkB,CAAE,GAAG,CACvB,gBAAgB,CAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CACjC,KAAK,CAAE,IAAI,AACf,CAAC,AAED,IAAI,8BAAC,CAAC,AACJ,gBAAgB,CAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CACjC,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CACnC,KAAK,CAAE,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CACxB,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,AACjB,CAAC,AAED,EAAE,8BAAC,CAAC,AACF,QAAQ,CAAE,IAAI,CACd,MAAM,CAAE,UAAU,CAClB,SAAS,CAAE,GAAG,CACd,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,GAAG,CACf,UAAU,CAAE,IAAI,CAChB,WAAW,CAAE,CAAC,CAAC,CACf,QAAQ,CAAE,CAAC,AACb,CAAC,AAED,EAAE,8BAAC,CAAC,AACF,QAAQ,CAAE,MAAM,CAChB,SAAS,CAAE,GAAG,CACd,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,GAAG,CACf,UAAU,CAAE,IAAI,CAChB,WAAW,CAAE,CAAC,CACd,QAAQ,CAAE,CAAC,AACb,CAAC,AAED,EAAE,8BAAC,CAAC,AACF,QAAQ,CAAE,IAAI,CACd,SAAS,CAAE,GAAG,CACd,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,GAAG,CACf,UAAU,CAAE,IAAI,CAChB,WAAW,CAAE,CAAC,CAAC,CACf,QAAQ,CAAE,CAAC,CAAC,AACd,CAAC,AAED,EAAE,8BAAC,CAAC,AACF,QAAQ,CAAE,IAAI,CACd,MAAM,CAAE,QAAQ,CAChB,SAAS,CAAE,GAAG,CACd,UAAU,CAAE,GAAG,CACf,UAAU,CAAE,IAAI,CAChB,OAAO,CAAE,GAAG,CACZ,UAAU,CAAE,MAAM,CAClB,WAAW,CAAE,CAAC,CACd,QAAQ,CAAE,CAAC,AACb,CAAC,AAED,iBAAE,CAAC,KAAK,eAAC,CAAC,AACR,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,CAAC,CACb,aAAa,CAAE,CAAC,CAChB,MAAM,CAAE,IAAI,CACZ,SAAS,CAAE,IAAI,AACjB,CAAC,AAED,EAAE,8BAAC,CAAC,AACF,QAAQ,CAAE,IAAI,CACd,SAAS,CAAE,GAAG,CACd,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,IAAI,CAChB,WAAW,CAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAClB,QAAQ,CAAE,CAAC,AACb,CAAC,AAED,QAAQ,8BAAC,CAAC,AACR,MAAM,CAAE,GAAG,CACX,KAAK,CAAE,GAAG,AACZ,CAAC,AAED,iBAAE,CAAC,AAAQ,WAAW,AAAE,CAAC,AACvB,QAAQ,CAAE,MAAM,CAChB,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,AACb,CAAC,AAED,oCAAM,MAAM,AAAC,CAAC,AACZ,OAAO,CAAE,IAAI,AACf,CAAC;AC7DH,iCAAkB,CAAC,AACjB,gBAAgB,CAAE,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CACnC,KAAK,CAAE,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CACzB,SAAS,CAAE,IAAI,CACf,MAAM,KAAK,CACX,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,AAC9B,CAAC,AAED,qBAAM,MAAM,AAAC,CAAC,AACZ,KAAK,CAAE,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CACzB,MAAM,CAAE,OAAO,AACjB,CAAC;AC6DC,SAAS,cAAC,CAAC,AACT,gBAAgB,CAAE,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AACtC,CAAC,AACD,SAAS,cAAC,CAAC,AACT,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,KAAK,AACd,CAAC,AACD,QAAQ,cAAC,CAAC,AACR,KAAK,CAAE,KAAK,CACZ,gBAAgB,CAAE,IAAI,mBAAmB,CAAC,CAC1C,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,iBAAiB,CAAE,SAAS,CAC5B,eAAe,CAAE,IAAI,AACvB,CAAC,AACD,QAAQ,cAAC,CAAC,AACR,KAAK,CAAE,KAAK,CACZ,gBAAgB,CAAE,IAAI,mBAAmB,CAAC,CAC1C,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,iBAAiB,CAAE,SAAS,CAC5B,eAAe,CAAE,IAAI,CACrB,YAAY,CAAE,GAAG,AACnB,CAAC,AACD,UAAU,cAAC,CAAC,AACV,KAAK,CAAE,KAAK,CACZ,gBAAgB,CAAE,IAAI,qBAAqB,CAAC,CAC5C,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,iBAAiB,CAAE,SAAS,CAC5B,eAAe,CAAE,IAAI,CACrB,YAAY,CAAE,GAAG,AACnB,CAAC,AACD,QAAQ,cAAC,CAAC,AACR,WAAW,CAAE,IAAI,CACjB,OAAO,CAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAC5B,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,KAAK,AACd,CAAC;ACYH,iCAAmB,CAAC,AAChB,UAAU,CAAE,IAAI,CAChB,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,aAAa,CAAE,UAAU,AAC7B,CAAC,AACD,iCAAmB,mBAAmB,AAAC,CAAC,AACxC,KAAK,CAAE,IAAI,AACX,CAAC,AACD,iCAAmB,yBAAyB,MAAM,AAAC,CAAC,AAChD,gBAAgB,CAAE,OAAO,CACzB,UAAU,CAAE,gBAAgB,CAAC,EAAE,CAAC,WAAW,AAC/C,CAAC;ACoBC,eAAe,cAAC,CAAC,AACf,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,OAAO,CACf,OAAO,CAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CACvB,UAAU,CAAE,IAAI,CAChB,gBAAgB,CAAE,IAAI,wBAAwB,CAAC,CAC/C,iBAAiB,CAAE,SAAS,CAC5B,mBAAmB,CAAE,IAAI,CACzB,eAAe,CAAE,IAAI,AACvB,CAAC,AAED,aAAa,cAAC,CAAC,AACb,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,OAAO,CACf,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,UAAU,CAC3B,OAAO,CAAE,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CACxB,UAAU,CAAE,IAAI,CAChB,gBAAgB,CAAE,IAAI,sBAAsB,CAAC,CAC7C,iBAAiB,CAAE,SAAS,CAC5B,mBAAmB,CAAE,IAAI,CACzB,eAAe,CAAE,IAAI,AACvB,CAAC,AAED,QAAQ,cAAC,CAAC,AACR,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,OAAO,CACf,YAAY,CAAE,IAAI,CAClB,WAAW,CAAE,IAAI,CACjB,UAAU,CAAE,GAAG,CACf,UAAU,CAAE,IAAI,CAChB,gBAAgB,CAAE,IAAI,oBAAoB,CAAC,CAC3C,iBAAiB,CAAE,SAAS,CAC5B,mBAAmB,CAAE,IAAI,CACzB,eAAe,CAAE,IAAI,AACvB,CAAC,AAED,wBAAU,CAAC,AACT,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,UAAU,AACzB,CAAC,AAED,gBAAE,CAAC,AACD,YAAY,CAAE,IAAI,CAClB,MAAM,CAAE,GAAG,AACb,CAAC,AAED,mBAAK,CAAC,AACJ,gBAAgB,CAAE,KAAK,AACzB,CAAC,AAED,QAAQ,cAAC,CAAC,AACR,WAAW,CAAE,IAAI,CACjB,OAAO,CAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAC5B,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,KAAK,AAEd,CAAC;ACjID,YAAY,8BAAC,CAAC,AACZ,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,CACb,QAAQ,CAAE,MAAM,AAClB,CAAC,AAED,EAAE,8BAAC,CAAC,AACF,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,QAAQ,CAAE,MAAM,CAChB,YAAY,CAAE,CAAC,CACf,UAAU,CAAE,CAAC,CACb,aAAa,CAAE,CAAC,CAChB,UAAU,CAAE,IAAI,CAChB,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CAChC,aAAa,CAAE,GAAG,AACpB,CAAC,AAEF,EAAE,8BAAC,CAAC,AACH,aAAa,CAAE,IAAI,CACjB,gBAAgB,CAAE,KAAK,CACvB,KAAK,CAAE,IAAI,AACd,CAAC,AAEA,SAAS,8BAAC,CAAC,AACT,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,WAAW,CAC7B,sBAAsB,CAAE,OAAO,CAC/B,uBAAuB,CAAE,OAAO,CAChC,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,OAAO,CAAE,CAAC,CAAC,IAAI,CACf,MAAM,CAAE,OAAO,CACf,SAAS,CAAE,GAAG,AAChB,CAAC,AAED,uCAAS,MAAM,AAAC,CAAC,AACf,YAAY,CAAE,OAAO,CAAC,OAAO,CAAC,OAAO,AACvC,CAAC,AAED,EAAE,sBAAO,CAAG,IAAI,eAAC,CAAC,AAChB,KAAK,CAAE,OAAO,CACd,gBAAgB,CAAE,IAAI,CACtB,YAAY,CAAE,OAAO,CAAC,OAAO,CAAC,IAAI,AACpC,CAAC,AAED,GAAG,8BAAC,CAAC,AACH,MAAM,CAAE,GAAG,CACX,gBAAgB,CAAE,OAAO,CACzB,UAAU,CAAE,GAAG,AAEjB,CAAC,AACD,cAAc,8BAAC,CAAC,AACd,WAAW,CAAE,GAAG,CAChB,YAAY,CAAE,KAAK,CACnB,WAAW,CAAE,KAAK,AACpB,CAAC"
}