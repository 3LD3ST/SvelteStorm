{"version":3,"file":"index.db208223.js","sources":["../../../src/Utilities/DirectoryStore.js","../../../src/Directory/CreateMenu.svelte","../../../src/Directory/FileTest.svelte","../../../src/Directory/FileDir.svelte","../../../src/XTerm.svelte","../../../src/StateManager/StateManager.svelte","../../../vite/preload-helper","../../../src/MonacoComponents/Monaco.svelte","../../../src/MonacoComponents/Editor.svelte","../../../src/App.svelte","../../../src/svelte.js"],"sourcesContent":["import {writable} from 'svelte/store';\n\nconst DirectoryData = writable({\n    fileTree: [],\n    openFilePath :'',\n    fileRead: false,\n    stateObj: {},\n    activeFile: '',\n    rename: false,\n    deleteFile: false,\n});\n\nconst openTabs = writable([]);\n\nexport { DirectoryData, openTabs}; ","<script>\n    export let filePath;\n    import { DirectoryData } from '../Utilities/DirectoryStore';\n    const fs = require('fs');\n    const unsub = DirectoryData.subscribe(data =>{\n    });\n\n    const renameHandler = () => {\n        console.log('Rename handler is clicked!')\n        //store.rename = true;\n        DirectoryData.update( currentData => {\n            return {...currentData, rename :true};\n        })\n    }\n\n    const deleteHandler = () => {\n        console.log('Delete Handler is clicked!');\n        fs.unlinkSync(filePath);\n        DirectoryData.update( currentData => {\n            return {...currentData, deleteFile:true};\n            \n        })\n\n    }\n\n</script>\n\n<!-- Svelte -->\n<div class=createMenuWrapper>\n    <button class=create-button on:click={renameHandler}>Rename</button>\n    <button class=create-button on:click={deleteHandler}>Delete</button>\n</div>\n\n\n\n\n\n\n<!-- Style -->\n<style>\n\n.createMenuWrapper{\n    background-color: white;\n    font-size: 15px;\n    width:100px;\n    height: 100px;\n}\n.create-button {\n    width: 90%;\n    height: 20px;\n    text-align: center;\n    margin-left: auto;\n    margin-right: auto;\n    display: block;\n    margin-top: 5px;\n  /* border-radius: 10px; */\n}\n\n.create-button:hover {\n    background-color: rgb(33, 37, 43);\n    color: white;\n    font-weight: 550;\n}\n</style>\n\n","<script>\n    export let fileTree;\n    // export let directory;\n    import { onMount , afterUpdate} from 'svelte';\n    import { DirectoryData } from '../Utilities/DirectoryStore';\n    import CreateMenu from './CreateMenu.svelte';\n    const fs = require('fs');\n    const fileState = {};\n    let rename = false;\n    let deleteFile = false;\n    \n    let rightClickStatus = false;\n    let activeFile = '';\n    let newName = '';\n    \n\n    onMount(() => {\n        console.log('mounting in Test')\n    });\n\n\n\n    // move into OnMount for all subs\n    const unsub = DirectoryData.subscribe(data =>{\n        activeFile = data.activeFile;\n        rename = data.rename;             \n    });\n\n    const toggleVisibility = (path) => {\n        if(!fileState[path]) fileState[path]= true;\n        else fileState[path] = false;\n    }\n\n\n    const dblClickHandler = (path) => {\n        const openFilePath = path;      \n        DirectoryData.update(currentData =>{\n            return {...currentData,openFilePath,fileRead:true};\n        })\n    }\n\n    const rightClickHandler = (path) => {\n        const openFilePath = path;      \n        DirectoryData.update(currentData =>{\n            return {...currentData, activeFile: openFilePath, rename: false};\n        })  \n\n    }\n\n    const renameHandler = (e,path) => {\n        console.log('key', e.key);\n         if(e.key === 'Enter') {\n         newName = e.target.value;\n        const fullPath = path.substring(0, path.lastIndexOf('/'));\n        fs.renameSync(path, fullPath+'/'+newName);\n         DirectoryData.update( currentData => {\n            return {...currentData, rename:false, activeFile: ''};\n        })\n     }\n    }\n\n     const resetRename = () => {\n         console.log('In resetRename handler')\n         DirectoryData.update( currentData => {\n             return {...currentData, rename: false, activeFile: ''};\n         })\n     }\n    \n\n    const deleteHandler = () => {\n        console.log('In delete handler');\n        \n    }\n \n\n</script>\n\n<div class=directory >\n{#if fileTree}\n{#each fileTree as {path,name, items}}\n<ul>\n    {#if items.length > 0}\n        {#if rename && activeFile === path}\n                <span>\n                    <input \n                    on:keypress={(e) => renameHandler(e,path)} \n                    value={newName}\n                    type=\"text\"/>\n                </span>\n        {:else}\n        <li on:click={toggleVisibility(path)} class={!fileState[path] ? \"liFolderClosed\" : \"liFolderOpen\"} on:contextmenu|preventDefault=\"{rightClickHandler(path)}\" on:click={activeFile ? resetRename : undefined}>{name}</li>\n            {#if activeFile === path}\n            <CreateMenu filePath={path} />\n            {/if}\n        {/if}\n    {:else}\n        {#if rename && activeFile === path}\n            <span>\n                <input \n                on:keypress={(e) => renameHandler(e,path)} \n                value={newName}\n                type=\"text\"/>\n            </span>\n        {:else}\n            <li  on:contextmenu|preventDefault=\"{rightClickHandler(path)}\" on:dblclick={dblClickHandler(path)} class=\"liFiles\" on:click={activeFile ? resetRename : undefined}>{name} </li>\n            {#if activeFile === path}\n                <CreateMenu filePath={path} />\n            {/if}\n        {/if}\n    {/if}\n    \n    {#if fileState[path] && items.length > 0}      \n      <svelte:self fileTree={items.sort((a,b) => {\n        return b.items.length - a.items.length\n    })} />\n    {/if}\n</ul>\n{/each}\n{/if}\n</div>\n\n<style>\n    \n    .liFolderClosed {\n        font-size: 15px;\n        cursor: pointer;\n        padding: 0px 0 5px 25px;\n        list-style: none;\n        background-image: url(\"./img/folderClosed.svg\");\n        background-repeat: no-repeat;\n        background-position: left;\n        background-size: 15px;\n        /* border: 1px solid black; */\n    }\n\n    .liFolderOpen {\n        font-size: 15px;\n        cursor: pointer;\n        display: flex;\n        justify-content: flex-start;\n        padding: 10px 0 5px 25px;\n        list-style: none;\n        background-image: url('./img/folderOpen.svg');\n        background-repeat: no-repeat;\n        background-position: left;\n        background-size: 15px;\n        /* border: 1px solid black; */\n    }\n\n    .liFiles {\n        font-size: 15px;\n        cursor: pointer;\n        padding-left: 25px;\n        margin-left: 20px;\n        margin-top: 1px;\n        list-style: none;\n        background-image: url('./img/document.png');\n        background-repeat: no-repeat;\n        background-position: left;\n        background-size: 15px;\n        /* border: 1px solid blue; */\n    }\n    \n    .directory{\n        display: flex;\n        flex-direction: column;\n        align-items: flex-start;\n        /* border:1px solid black; */\n    }\n\n    ul{\n        padding-left: 10px;\n        margin: 5px;\n    }\n\ninput{\n    background-color: white;\n}\n\n</style>\n","<script>  \n    import FileTest from './FileTest.svelte';    \n    import { onMount, onDestroy, afterUpdate} from 'svelte';\n    import { DirectoryData } from '../Utilities/DirectoryStore';\n    const fs = require('fs');\n    let savedTree = [];\n    var remote = window.require('electron').remote;\n    var electronFs = remote.require('fs');\n    const {ipcRenderer} = require('electron');\n\n    \n    let directory;\n    let rename;\n    let stateObj;\n    let resultArr = [];\n    let fsTimeout;\n    \n\n    const unsub = DirectoryData.subscribe(data =>{\n        rename = data.rename;\n        stateObj = data.stateObj;\n    });\n\n    // store \n    onMount (()=>{\n    \n    });\n\n    afterUpdate(() => {\n        if(directory) {\n        // console.log('directory', directory);\n        fs.watch(directory[0], (eventType, filename) => {\n            if(eventType === 'rename' && !fsTimeout){  \n                console.log(' IN RUN BUILD');\n                readFileNames(directory);              \n            }\n\n            if(!fsTimeout){\n            fsTimeout = setTimeout(function() { fsTimeout=null }, 5000);\n        }\n            \n        })\n        }\n        \n    });\n \n    onDestroy(()=>{\n        unsub();\n    });\n\n    ipcRenderer.on('folder-opened', function (evt, file, content) {\n        directory = content;\n        if (directory && directory[0]){        \n                var fileTree = new FileTree(directory[0]);        \n                fileTree.build();\n                \n                savedTree = fileTree.items;\n                savedTree.sort((a,b) => {\n                    return b.items.length - a.items.length;\n                })\n                DirectoryData.update(currentData =>{\n                    return {\n                        ...currentData,\n                        fileTree: savedTree\n                    }\n                })\n                //console.log(Array.isArray(savedTree))\n                // console.log('fileTree',savedTree);\n            }\n    })\n\n\n\n\n    \n\n\n    //method to read all the files inside the directory\n    const readFileNames = (directory) => {\n        var fileTree = new FileTree(directory[0]);        \n        fileTree.build();\n        \n        savedTree = fileTree.items;\n        savedTree.sort((a,b) => {\n            return b.items.length - a.items.length;\n        })\n        DirectoryData.update(currentData =>{\n            return savedTree;\n        })\n    }\n    \n    class FileTree {\n        constructor(path, name = null){\n            \n            this.path = path;\n            this.name = name;\n            this.items = [];\n            this.state = {\n                path : path,\n                name: name,\n                items: [],\n                color : 'white',\n                isOpen : false\n            }   \n            //this.handleToggle = this.handleToggle.bind(this);\n            //console.log(this.state.isOpen)\n        }\n\n        //method to build file tree\n        build () {\n            this.items = FileTree.readDir(this.path,'',0);\n        }\n        static readDir(path) {\n            var fileArray = [];        \n            \n            electronFs.readdirSync(path).forEach(file => {\n                var fileInfo = new FileTree(`${path}/${file}`, file);\n                var stat = electronFs.statSync(fileInfo.path);\n\n                if (file.split('.').pop() === 'svelte'){\n                    console.log(`${path}/${file}`)\n                    if(path.includes('node_modules') !== true) {\n                        var content = fs.readFileSync(`${path}/${file}`).toString();\n                        console.log(content)\n                    var stateArr = [];\n                    var value = content.split(/\\r?\\n/);\n                    if(value !==[\"\"]) {\n                        value.forEach( el => {\n                            if(el && el.includes('export')) {                       \n                                el = el.replace(/\\s/g, '');\n                                if(el.includes('exportlet')) el = el.replace('exportlet','');\n                                if(el.includes('exportconst')) el = el.replace('exportconst','');\n                                stateArr.push(el.replace(';',''));\n                                console.log('Sucess finding export');\n                                console.log(stateArr)                                \n                                stateObj[file] = stateArr;                                 \n                            }\n\n                            DirectoryData.update(currentData =>{\n                                return {\n                                    ...currentData,\n                                       stateObj\n                                    };\n                            })\n                            \n                            \n                        })\n                    }\n\n                    console.log('file', file);\n                    }\n\n                    \n                    \n                }\n\n                if (stat.isDirectory()){\n                    fileInfo.items = FileTree.readDir(fileInfo.path);\n                }\n\n                fileArray.push(fileInfo);\n            })   \n            return fileArray;\n        }\n    }\n</script>\n\n<!-- HTML -->\n\n<div class=directoryContainer>\n    {#if directory} \n    <FileTest directory={directory[0]} fileTree={savedTree} />\n    {/if}\n</div>\n<!-- CSS -->\n<style>\n    .directoryContainer{\n        max-height: 50vh;\n        overflow-y: scroll;\n        display: flex;\n        flex-direction: column;\n        align-content: flex-start;\n    }\n    .directoryContainer::-webkit-scrollbar {\n    width: 12px;\n}\n\n/* .directoryContainer::-webkit-scrollbar-track:hover {\n    -webkit-box-shadow: inset 0 0 3px rgba(0, 0, 0, 0.3); \n    border-radius: 0px;\n} */\n\n.directoryContainer::-webkit-scrollbar-thumb:hover {\n    background-color: #e28e2d;\n    transition: background-color 2s ease-in-out;\n}\n</style>\n","<script>\n    import { onMount } from 'svelte';\n    import { FitAddon } from 'xterm-addon-fit'\n    import './xterm.css';\n    const { remote, ipcRenderer } = require('electron');\n    const Terminal = require('xterm').Terminal\n\n    const fitAddon = new FitAddon();\n    const term = new Terminal();\n\n    onMount(() => {\n        term.setOption('cursorStyle', 'block');\n        term.setOption('cursorBlink', true);\n        term.setOption('fontSize', 14);\n        term.loadAddon(fitAddon);\n        term.open(document.getElementById('xterm'));\n        fitAddon.fit();\n\n        term.write('\\x1b[32mWelcome to Svelte Storm!\\x1b[m\\r\\n');\n\n        term.onData(e => {\n            ipcRenderer.send(\"terminal-into\", e);\n        });\n        \n        ipcRenderer.on('terminal-incData', (event, data) => {\n            term.write(data);\n        });\n    });\n\n</script>\n\n<div id=\"xterm\">\n\n</div>","<script>   \n\n    import { DirectoryData } from '../Utilities/DirectoryStore';\n    export let stateObj = {};\n        \n        const unsub = DirectoryData.subscribe(data =>{\n            stateObj = data.stateObj;\n            console.log('stateObj', stateObj)\n        })\n    \n    </script>\n    \n    <style>\n    \n    </style>\n    \n    <div class=\"state-container\">\n        <h5>State Manager</h5>\n        <ul>\n            {#each Object.entries(stateObj) as [file,state]}\n                <li>{file} : {state}</li>\n            {/each}\n        </ul>\n    </div>","let scriptRel;const seen = {};export const __vitePreload = function preload(baseModule, deps) {\n    // @ts-ignore\n    if (!__VITE_IS_MODERN__ || !deps) {\n        return baseModule();\n    }\n    // @ts-ignore\n    if (scriptRel === undefined) {\n        // @ts-ignore\n        const relList = document.createElement('link').relList;\n        // @ts-ignore\n        scriptRel =\n            relList && relList.supports && relList.supports('modulepreload')\n                ? 'modulepreload'\n                : 'preload';\n    }\n    return Promise.all(deps.map((dep) => {\n        // @ts-ignore\n        if (dep in seen)\n            return;\n        // @ts-ignore\n        seen[dep] = true;\n        const isCss = dep.endsWith('.css');\n        const cssSelector = isCss ? '[rel=\"stylesheet\"]' : '';\n        // @ts-ignore check if the file is already preloaded by SSR markup\n        if (document.querySelector(`link[href=\"${dep}\"]${cssSelector}`)) {\n            return;\n        }\n        // @ts-ignore\n        const link = document.createElement('link');\n        // @ts-ignore\n        link.rel = isCss ? 'stylesheet' : scriptRel;\n        if (!isCss) {\n            link.as = 'script';\n            link.crossOrigin = '';\n        }\n        link.href = dep;\n        // @ts-ignore\n        document.head.appendChild(link);\n        if (isCss) {\n            return new Promise((res, rej) => {\n                link.addEventListener('load', res);\n                link.addEventListener('error', rej);\n            });\n        }\n    })).then(() => baseModule());\n}","<script>\n  import {  afterUpdate, onMount, onDestroy } from 'svelte';\n  import * as monaco from 'monaco-editor';\n  // import { initMonaco } from './MonacoEnv';\n  // /Users/samuelfilip/keepItSvelte/SvelteStorm/public/monaco-editor/esm/vs/editor/editor.worker.js\n  // import { editorWorker } from '../../public/monaco-editor/esm/vs/editor/editor.worker?worker';\n  // import { jsonWorker } from '../../public/monaco-editor/esm/vs/language/json/json.worker?worker';\n  // import { cssWorker } from '../../public/monaco-editor/esm/vs/language/css/css.worker?worker';\n  // import { htmlWorker } from '../../public/monaco-editor/esm/vs/language/html/html.worker?worker';\n  // import { tsWorker } from '../../public/monaco-editor/esm/vs/language/typescript/ts.worker?worker';\n\n  const fs = require('fs');\n  const { ipcRenderer } = require('electron');\n  \n  export let value;\n  export let language;\n  export let filePath;\n  \n  let messageObj;\n  let monEditor;\n  let containerElt;\n\n  onMount(async () => {\n    const opts = {\n      value: value.join('\\n'),\n      language: language,\n      theme: 'vs-dark',\n      wordWrap: 'on',\n      fontSize: \"16px\",\n    }\n\n    if (!self.MonacoEnvironment) {\n      try {\n        self.MonacoEnvironment = {\n          getWorker: function (_moduleId, label) {\n          if (label === 'json') {\n              return new jsonWorker();\n          }\n          if (label === 'css' || label === 'scss' || label === 'less') {\n              return new cssWorker();\n          }\n          if (label === 'html' || label === 'handlebars' || label === 'razor') {\n              return new htmlWorker();\n          }\n          if (label === 'typescript' || label === 'javascript') {\n              return new tsWorker();\n          }\n          return new editorWorker();\n        }\n      }\n      } catch(err) {\n        console.log(err)\n      }\n    }\n    \n    let Monaco = await import('monaco-editor')\n    // monEditor.setModel(monaco.editor.createModel(value, language));\n    monEditor = Monaco.editor.create(containerElt, opts)\n\n    return () => {\n      monEditor.dispose();\n    }\n  })\n\n\tafterUpdate(() => {\n    if(monEditor) {\n        fs.readFile(filePath, 'utf8', (err, res) => {\n          if (!err) {\n            monEditor.setModel(monaco.editor.createModel(res, language));\n          }\n        })\n        monEditor.onDidChangeModelContent(() => {\n          // monEditor.setModel(monaco.editor.createModel(monEditor.getValue(), language))\n          console.log(monEditor.getValue())\n        }\n      )}\n\t});\n\n  // onDestroy(() => {\n\t// \tmonEditor = monaco.editor.destroy()\n\t// });\n  \n  ipcRenderer.on('save-markdown',  function () {\n    messageObj = {content : monEditor.getValue(), file : filePath }\n    ipcRenderer.send('synchronous-message', messageObj)\n  });\n</script>\n\n<svelte:head />\n<div class={$$props.class} bind:this={containerElt} />\n\n  \n","<script>\n  import Monaco from './Monaco.svelte';\n  import { DirectoryData, openTabs } from '../Utilities/DirectoryStore';\n\n  const { remote, ipcRenderer } = require('electron');\n  const fs = require('fs');\n  const path = require('path');\n  const currentWindow = remote.getCurrentWindow();\n  \n  let activeTabValue = 0;\n  let activeEditor = 0;\n\n  let value = [''];\n  let language = 'html';\n  let [filePath, fileName, readData] = ['', '', ''];\n  let title = 'Svelte Storm';\n  let count = 0;\n\n  function addTab(newFile) {\n    let duplicate = false;\n    $openTabs.map((tab) => {\n      if (tab.filePath === filePath) {\n        duplicate = true;\n      }\n    })\n    if (!duplicate) {\n      // tabs = [ ...tabs, { editorValue: value, editorLang: getLanguage(editorLang), fileName: fileName, filePath: filePath, tabId: count, ext: language }];\n      $openTabs = [ ...$openTabs, newFile ]\n      count = count + 1;\n      console.log($openTabs)\n    }\n  };\n\n  function deleteTab(targetId) {\n    $openTabs = $openTabs.filter((t) => t.tabId != targetId)\n    activeTabValue = (activeTabValue - 1) || 0;\n    activeEditor = activeTabValue;\n    // value =$openTabs[(activeEditor)].editorValue)\n  }\n\n  const handleClick = (tabId) => () => {\n    activeTabValue = tabId;\n    activeEditor = activeTabValue;\n  }\n  \n  const getLanguage = (lang) => {\n      switch (lang) {\n        case 'js':\n          return 'javascript';\n        case 'jsx':\n          return 'javascript';\n        case 'ts':\n          return 'typescript';\n        case 'json':\n          return 'json';\n        case 'css':\n          return 'css';\n        case 'html':\n          return 'html';\n        case 'md':\n          return 'markdown';\n        case 'svelte':\n          return 'html';\n        default:\n          return undefined;\n      }\n  }\n\n  ipcRenderer.on('file-opened', function (evt, file, content) {\n      const newTab = {}\n      filePath = (file);\n      fileName = file.slice().split('/').pop();\n      language = file.slice().split('.').pop();\n      newTab.editorValue = content.split(/\\r?\\n/);\n      newTab.ext = language;\n      newTab.editorLang = getLanguage(language);\n      newTab.filePath = filePath;\n      newTab.fileName = fileName;\n      newTab.tabId = count;\n      addTab(newTab);\n      if (file) { title = `${path.basename(file)} - ${title}`; }\n  });\n\n  const unsub = DirectoryData.subscribe(data => {\n    const newTab = {};\n      if (data.fileRead) {\n        readData = fs.readFileSync(data.openFilePath).toString();\n        value = readData.split(/\\r?\\n/);\n        fileName = data.openFilePath.slice().split('/').pop();\n        language = path.basename(data.openFilePath).split('.').pop();\n        if (data.openFilePath) { title = `${path.basename(data.openFilePath)} - Svelte Storm`; }\n        newTab.editorValue = value;\n        newTab.ext = language;\n        newTab.editorLang = getLanguage(language);\n        newTab.filePath = readData;\n        newTab.fileName = fileName;\n        newTab.tabId = count;\n        currentWindow.setTitle(title);\n        addTab(newTab);\n      }\n  });\n\n</script>\n\n  <ul>\n    {#each $openTabs as tab}\n    <li class={activeTabValue === tab.tabId ? 'active' : ''}>\n      <span class=\"tab-span\"\n        on:click={handleClick(tab.tabId)}\n      >\n        <img src=\"../src/icons/file_type_{tab.ext}.svg\" \n          alt={''}\n        />\n        {tab.fileName}\n        <span\n          class=\"delete-button\" \n          value={tab.tabId}\n          on:click={deleteTab(tab.tabId)}\n        >\n          &times\n        </span>\n      </span>\n    </li>\n    {/each}\n  </ul>\n  \n  {#if $openTabs.length > 0}\n    <div class=\"editor-body\">\n        <Monaco\n          class=\"childClass current\"\n          bind:value={$openTabs[(activeEditor)].editorValue}\n          bind:language={$openTabs[(activeEditor)].editorLang}\n          bind:filePath={$openTabs[(activeEditor)].filePath}\n        />\n        {console.log(activeEditor)}\n    </div>\n  {/if}\n\n<style>\n\n  .editor-body {\n    width: 100%;\n    height: 100vh;\n    overflow: scroll;\n  }\n\n  ul {\n    display: flex;\n    flex-direction: row;\n    overflow: scroll;\n    padding-left: 0;\n    margin-top: 0;\n    margin-bottom: 0;\n    list-style: none;\n    border-bottom: 1px solid #dee2e6;\n    border-radius: 5px;\n  }\n\n\tli {\n\t\tmargin-bottom: -1px;\n    background-color: black;\n    color: #fff;\n\t}\n\n  .tab-span {\n    border: 1px solid transparent;\n    border-top-left-radius: 0.25rem;\n    border-top-right-radius: 0.25rem;\n    display: flex;\n    flex-direction: row;\n    padding: 0 1rem;\n    cursor: pointer;\n    font-size: 1em;\n  }\n\n  .tab-span:hover {\n    border-color: #e9ecef #e9ecef #dee2e6;\n  }\n\n  li.active > span {\n    color: #495057;\n    background-color: #fff;\n    border-color: #dee2e6 #dee2e6 #fff;\n  }\n\n  img {\n    height: 1em;\n    background-color: inherit;\n    margin-top: 3px;\n  }\n  .delete-button {\n    margin-left: 5px;\n    border-right: black;\n    border-left: black;\n  }\n\n</style>\n","<script>\n    import FileDir from './Directory/FileDir.svelte'\n    import XTerm from './XTerm.svelte';\n    import StateManager from './StateManager/StateManager.svelte';\n    import Editor from './MonacoComponents/Editor.svelte';\n    export let orientation = 'columns';\n  \n    let localhost = \"http://localhost:5000/\"\n    let refreshed = false\n  \n    function onClick() {\n      refreshed = true\n      localhost = \"http://localhost:5000/\"\n    }\n\n  </script>\n  \n  <style>\n  \n  body {\n    height: 100%;\n    width: 100%;\n  }\n\n  .wrapper {\n      height: 100%;\n      display: grid;\n      grid-gap: 1px;\n      grid-template-columns: repeat(5, 1fr);\n      grid-template-rows: repeat(5, 1fr);\n      background-color: rgb(248, 246, 246);\n      color: #444;\n  }\n  \n  .box {\n    background-color: rgb(233, 217, 186);\n    color: rgb(226, 142, 45);\n    border-radius: 0px;\n    padding: 10px;\n    font-size: 150%;\n  }\n\n  .a {\n    grid-column: 1 ;\n    grid-row: 1 / 5;\n  }\n  \n  .b {\n    overflow: scroll;\n    grid-column: 2 / 4 ;\n    grid-row: 1 / 5;\n  }\n\n  .c {\n    grid-column: 1 / 3 ;\n    grid-row: 5 ;\n  }\n  \n  .d {\n    grid-column: 4 / 6;\n    grid-row: 1 / 5;\n  }\n  \n  .e {\n    grid-column: 3 / 6;\n    grid-row: 5;\n  }\n  \n  .webpage {\n    height: 100%;\n    width: 100%;\n  }\n\n  .b :global(.childClass) {\n    overflow: scroll;\n    display: flex;\n    height: 100%;\n    width: 100%;\n  }\n\n  iframe:focus {\n    outline: none;\n  }\n\n</style>\n\n  <body class:orientation>\n  <main class=\"wrapper\" >\n      <div class=\"box a target\">\n          <FileDir />\n      </div>\n      <div class=\"box b\">\n          <!-- svelte-ignore missing-declaration -->\n          <Editor class=\"childClass\"/>\n      </div>\n      <div class=\"box c root\">\n        <StateManager />\n    </div>\n      <div on:click={onClick}  class=\"box d root\"> \n        {#if refreshed}\n        <iframe class=\"webpage\" title=\"local host\" src={localhost}></iframe>\n        {:else}\n        <iframe class=\"webpage\" title=\"local host\" src={localhost}></iframe>\n        {/if}\n        </div>\n      <div class=\"box e\" > \n          <XTerm />\n      </div>\n\n  </main>\n  </body>\n\n","import App from './App.svelte';\n\nconst app = new App({\n    target: document.body,\n\t  props: {},\n});\n\nexport default app;"],"names":["DirectoryData","writable","fileTree","openFilePath","fileRead","stateObj","activeFile","rename","deleteFile","openTabs","ctx","filePath","fs","require","subscribe","log","update","currentData","unlinkSync","length","ctx2","sort","a","b","items","fileState","newName","data","renameHandler","e","path","key","target","value","fullPath","substring","lastIndexOf","renameSync","savedTree","electronFs","window","remote","ipcRenderer","directory","fsTimeout","unsub","watch","eventType","filename","setTimeout","on","evt","file","content","FileTree","build","readFileNames","directory2","[object Object]","name","state","color","isOpen","readDir","this","fileArray","readdirSync","forEach","fileInfo","stat","statSync","split","pop","includes","readFileSync","toString","stateArr","el","replace","push","isDirectory","Terminal","fitAddon","FitAddon","term","setOption","loadAddon","open","document","getElementById","fit","write","onData","send","event","Object","entries","scriptRel","seen","class","messageObj","monEditor","containerElt","language","opts","join","theme","wordWrap","fontSize","self","MonacoEnvironment","getWorker","_moduleId","label","jsonWorker","cssWorker","htmlWorker","tsWorker","editorWorker","err","Monaco2","baseModule","deps","relList","createElement","supports","Promise","all","map","dep","isCss","endsWith","cssSelector","querySelector","link","rel","as","crossOrigin","href","head","appendChild","res","rej","addEventListener","then","editor","create","dispose","readFile","setModel","monaco.editor","createModel","onDidChangeModelContent","getValue","fileName","ext","tabId","console","editorValue","editorLang","currentWindow","getCurrentWindow","activeTabValue","activeEditor","readData","title","count","newFile","duplicate","tab","$openTabs","getLanguage","lang","newTab","slice","basename","setTitle","targetId","filter","t","orientation","localhost","refreshed","body","props"],"mappings":"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"}