body.svelte-1qnm3ek{height:100%;width:100%}.wrapper.svelte-1qnm3ek{height:100%;display:grid;grid-gap:1px;grid-template-columns:repeat(5, 1fr);grid-template-rows:repeat(5, 1fr);background-color:rgb(248, 246, 246);color:#444}.box.svelte-1qnm3ek{background-color:rgb(233, 217, 186);color:rgb(226, 142, 45);border-radius:0px;padding:10px;font-size:150%}.a.svelte-1qnm3ek{grid-column:1 ;grid-row:1 / 5}.b.svelte-1qnm3ek{overflow:scroll;grid-column:2 / 4 ;grid-row:1 / 5}.c.svelte-1qnm3ek{grid-column:1 / 3 ;grid-row:5 }.d.svelte-1qnm3ek{grid-column:4 / 6;grid-row:1 / 5}.e.svelte-1qnm3ek{grid-column:3 / 6;grid-row:5}.webpage.svelte-1qnm3ek{height:100%;width:100%}.b.svelte-1qnm3ek .childClass{overflow:scroll;display:flex;height:100%;width:100%}iframe.svelte-1qnm3ek:focus{outline:none}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBwLnN2ZWx0ZSIsInNvdXJjZXMiOlsiQXBwLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxyXG4gICAgaW1wb3J0IEZpbGVEaXIgZnJvbSAnLi9EaXJlY3RvcnkvRmlsZURpci5zdmVsdGUnXHJcbiAgICBpbXBvcnQgTmV3VGFicyBmcm9tICcuL01vbmFjb0NvbXBvbmVudHMvVGFicy9OZXdUYWJzLnN2ZWx0ZSc7XHJcbiAgICBpbXBvcnQgWFRlcm0gZnJvbSAnLi9YVGVybS5zdmVsdGUnO1xyXG4gICAgaW1wb3J0IFN0YXRlTWFuYWdlciBmcm9tICcuL1N0YXRlTWFuYWdlci9TdGF0ZU1hbmFnZXIuc3ZlbHRlJ1xyXG4gICAgZXhwb3J0IGxldCBvcmllbnRhdGlvbiA9ICdjb2x1bW5zJztcclxuICAgIGV4cG9ydCBsZXQgbG9jYWxob3N0O1xyXG4gIFxyXG4gICAgbG9jYWxob3N0ID0gXCJodHRwOi8vbG9jYWxob3N0OjUwMDAvXCJcclxuICAgIHJlZnJlc2hlZCA9IGZhbHNlXHJcbiAgXHJcbiAgICBmdW5jdGlvbiBvbkNsaWNrKCkge1xyXG4gICAgICByZWZyZXNoZWQgPSB0cnVlXHJcbiAgICAgIGxvY2FsaG9zdCA9IFwiaHR0cDovL2xvY2FsaG9zdDo1MDAwL1wiXHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHRhYnMgPSBbXVxyXG5cclxuICA8L3NjcmlwdD5cclxuICBcclxuICA8c3R5bGU+XHJcbiAgXHJcbiAgYm9keSB7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICB9XHJcblxyXG4gIC53cmFwcGVyIHtcclxuICAgICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgICBncmlkLWdhcDogMXB4O1xyXG4gICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCg1LCAxZnIpO1xyXG4gICAgICBncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdCg1LCAxZnIpO1xyXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjQ4LCAyNDYsIDI0Nik7XHJcbiAgICAgIGNvbG9yOiAjNDQ0O1xyXG4gIH1cclxuICBcclxuICAuYm94IHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyMzMsIDIxNywgMTg2KTtcclxuICAgIGNvbG9yOiByZ2IoMjI2LCAxNDIsIDQ1KTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDBweDtcclxuICAgIHBhZGRpbmc6IDEwcHg7XHJcbiAgICBmb250LXNpemU6IDE1MCU7XHJcbiAgfVxyXG5cclxuICAuYSB7XHJcbiAgICBncmlkLWNvbHVtbjogMSA7XHJcbiAgICBncmlkLXJvdzogMSAvIDU7XHJcbiAgfVxyXG4gIFxyXG4gIC5iIHtcclxuICAgIG92ZXJmbG93OiBzY3JvbGw7XHJcbiAgICBncmlkLWNvbHVtbjogMiAvIDQgO1xyXG4gICAgZ3JpZC1yb3c6IDEgLyA1O1xyXG4gIH1cclxuXHJcbiAgLmMge1xyXG4gICAgZ3JpZC1jb2x1bW46IDEgLyAzIDtcclxuICAgIGdyaWQtcm93OiA1IDtcclxuICB9XHJcbiAgXHJcbiAgLmQge1xyXG4gICAgZ3JpZC1jb2x1bW46IDQgLyA2O1xyXG4gICAgZ3JpZC1yb3c6IDEgLyA1O1xyXG4gIH1cclxuICBcclxuICAuZSB7XHJcbiAgICBncmlkLWNvbHVtbjogMyAvIDY7XHJcbiAgICBncmlkLXJvdzogNTtcclxuICB9XHJcbiAgXHJcbiAgLndlYnBhZ2Uge1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgfVxyXG5cclxuICAuYiA6Z2xvYmFsKC5jaGlsZENsYXNzKSB7XHJcbiAgICBvdmVyZmxvdzogc2Nyb2xsO1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGhlaWdodDogMTAwJTtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gIH1cclxuXHJcbiAgaWZyYW1lOmZvY3VzIHtcclxuICAgIG91dGxpbmU6IG5vbmU7XHJcbiAgfVxyXG5cclxuPC9zdHlsZT5cclxuXHJcbiAgPGJvZHkgY2xhc3M6b3JpZW50YXRpb24+XHJcbiAgPG1haW4gY2xhc3M9XCJ3cmFwcGVyXCIgPlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiYm94IGEgdGFyZ2V0XCI+XHJcbiAgICAgICAgICA8RmlsZURpciAvPlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGRpdiBjbGFzcz1cImJveCBiXCI+XHJcbiAgICAgICAgICA8IS0tIHN2ZWx0ZS1pZ25vcmUgbWlzc2luZy1kZWNsYXJhdGlvbiAtLT5cclxuICAgICAgICAgIDxOZXdUYWJzIGNsYXNzPVwiY2hpbGRDbGFzc1wiIHt0YWJzfS8+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiYm94IGMgcm9vdFwiPlxyXG4gICAgICAgIDxTdGF0ZU1hbmFnZXIgLz5cclxuICAgIDwvZGl2PlxyXG4gICAgICA8ZGl2IG9uOmNsaWNrPXtvbkNsaWNrfSAgY2xhc3M9XCJib3ggZCByb290XCI+IFxyXG4gICAgICAgIHsjaWYgcmVmcmVzaGVkfVxyXG4gICAgICAgIDxpZnJhbWUgY2xhc3M9XCJ3ZWJwYWdlXCIgdGl0bGU9XCJsb2NhbCBob3N0XCIgc3JjPXtsb2NhbGhvc3R9PjwvaWZyYW1lPlxyXG4gICAgICAgIHs6ZWxzZX1cclxuICAgICAgICA8aWZyYW1lIGNsYXNzPVwid2VicGFnZVwiIHRpdGxlPVwibG9jYWwgaG9zdFwiIHNyYz17bG9jYWxob3N0fT48L2lmcmFtZT5cclxuICAgICAgICB7L2lmfVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiYm94IGVcIiA+IFxyXG4gICAgICAgICAgPFhUZXJtIC8+XHJcbiAgICAgIDwvZGl2PlxyXG5cclxuICA8L21haW4+XHJcbiAgPC9ib2R5PlxyXG5cclxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXNCRSxJQUFJLGVBQUMsQ0FBQyxBQUNKLE1BQU0sQ0FBRSxJQUFJLENBQ1osS0FBSyxDQUFFLElBQUksQUFDYixDQUFDLEFBRUQsUUFBUSxlQUFDLENBQUMsQUFDTixNQUFNLENBQUUsSUFBSSxDQUNaLE9BQU8sQ0FBRSxJQUFJLENBQ2IsUUFBUSxDQUFFLEdBQUcsQ0FDYixxQkFBcUIsQ0FBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUNyQyxrQkFBa0IsQ0FBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUNsQyxnQkFBZ0IsQ0FBRSxJQUFJLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUNwQyxLQUFLLENBQUUsSUFBSSxBQUNmLENBQUMsQUFFRCxJQUFJLGVBQUMsQ0FBQyxBQUNKLGdCQUFnQixDQUFFLElBQUksR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQ3BDLEtBQUssQ0FBRSxJQUFJLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUN4QixhQUFhLENBQUUsR0FBRyxDQUNsQixPQUFPLENBQUUsSUFBSSxDQUNiLFNBQVMsQ0FBRSxJQUFJLEFBQ2pCLENBQUMsQUFFRCxFQUFFLGVBQUMsQ0FBQyxBQUNGLFdBQVcsQ0FBRSxDQUFDLENBQUMsQ0FDZixRQUFRLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEFBQ2pCLENBQUMsQUFFRCxFQUFFLGVBQUMsQ0FBQyxBQUNGLFFBQVEsQ0FBRSxNQUFNLENBQ2hCLFdBQVcsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUNuQixRQUFRLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEFBQ2pCLENBQUMsQUFFRCxFQUFFLGVBQUMsQ0FBQyxBQUNGLFdBQVcsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUNuQixRQUFRLENBQUUsQ0FBQyxDQUFDLEFBQ2QsQ0FBQyxBQUVELEVBQUUsZUFBQyxDQUFDLEFBQ0YsV0FBVyxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUNsQixRQUFRLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEFBQ2pCLENBQUMsQUFFRCxFQUFFLGVBQUMsQ0FBQyxBQUNGLFdBQVcsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDbEIsUUFBUSxDQUFFLENBQUMsQUFDYixDQUFDLEFBRUQsUUFBUSxlQUFDLENBQUMsQUFDUixNQUFNLENBQUUsSUFBSSxDQUNaLEtBQUssQ0FBRSxJQUFJLEFBQ2IsQ0FBQyxBQUVELGlCQUFFLENBQUMsQUFBUSxXQUFXLEFBQUUsQ0FBQyxBQUN2QixRQUFRLENBQUUsTUFBTSxDQUNoQixPQUFPLENBQUUsSUFBSSxDQUNiLE1BQU0sQ0FBRSxJQUFJLENBQ1osS0FBSyxDQUFFLElBQUksQUFDYixDQUFDLEFBRUQscUJBQU0sTUFBTSxBQUFDLENBQUMsQUFDWixPQUFPLENBQUUsSUFBSSxBQUNmLENBQUMifQ== */
.createMenuWrapper.svelte-1s22vro{background-color:white;font-size:15px;width:100px;height:100px}.create-button.svelte-1s22vro{width:90%;height:20px;text-align:center;margin-left:auto;margin-right:auto;display:block;margin-top:5px}.create-button.svelte-1s22vro:hover{background-color:rgb(33, 37, 43);color:white;font-weight:550}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ3JlYXRlTWVudS5zdmVsdGUiLCJzb3VyY2VzIjpbIkNyZWF0ZU1lbnUuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XHJcbiAgICBleHBvcnQgbGV0IGZpbGVQYXRoO1xyXG4gICAgaW1wb3J0IERpcmVjdG9yeURhdGEgZnJvbSAnLi4vVXRpbGl0aWVzL0RpcmVjdG9yeVN0b3JlJztcclxuICAgIGNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcclxuICAgIGNvbnN0IHVuc3ViID0gRGlyZWN0b3J5RGF0YS5zdWJzY3JpYmUoZGF0YSA9PntcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHJlbmFtZUhhbmRsZXIgPSAoKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ1JlbmFtZSBoYW5kbGVyIGlzIGNsaWNrZWQhJylcclxuICAgICAgICAvL3N0b3JlLnJlbmFtZSA9IHRydWU7XHJcbiAgICAgICAgRGlyZWN0b3J5RGF0YS51cGRhdGUoIGN1cnJlbnREYXRhID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHsuLi5jdXJyZW50RGF0YSwgcmVuYW1lIDp0cnVlfTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGRlbGV0ZUhhbmRsZXIgPSAoKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ0RlbGV0ZSBIYW5kbGVyIGlzIGNsaWNrZWQhJyk7XHJcbiAgICAgICAgZnMudW5saW5rU3luYyhmaWxlUGF0aCk7XHJcbiAgICAgICAgRGlyZWN0b3J5RGF0YS51cGRhdGUoIGN1cnJlbnREYXRhID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHsuLi5jdXJyZW50RGF0YSwgZGVsZXRlRmlsZTp0cnVlfTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfSlcclxuXHJcbiAgICB9XHJcblxyXG48L3NjcmlwdD5cclxuXHJcbjwhLS0gU3ZlbHRlIC0tPlxyXG48ZGl2IGNsYXNzPWNyZWF0ZU1lbnVXcmFwcGVyPlxyXG4gICAgPGJ1dHRvbiBjbGFzcz1jcmVhdGUtYnV0dG9uIG9uOmNsaWNrPXtyZW5hbWVIYW5kbGVyfT5SZW5hbWU8L2J1dHRvbj5cclxuICAgIDxidXR0b24gY2xhc3M9Y3JlYXRlLWJ1dHRvbiBvbjpjbGljaz17ZGVsZXRlSGFuZGxlcn0+RGVsZXRlPC9idXR0b24+XHJcbjwvZGl2PlxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG48IS0tIFN0eWxlIC0tPlxyXG48c3R5bGU+XHJcblxyXG4uY3JlYXRlTWVudVdyYXBwZXJ7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcclxuICAgIGZvbnQtc2l6ZTogMTVweDtcclxuICAgIHdpZHRoOjEwMHB4O1xyXG4gICAgaGVpZ2h0OiAxMDBweDtcclxufVxyXG4uY3JlYXRlLWJ1dHRvbiB7XHJcbiAgICB3aWR0aDogOTAlO1xyXG4gICAgaGVpZ2h0OiAyMHB4O1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XHJcbiAgICBtYXJnaW4tcmlnaHQ6IGF1dG87XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIG1hcmdpbi10b3A6IDVweDtcclxuICAvKiBib3JkZXItcmFkaXVzOiAxMHB4OyAqL1xyXG59XHJcblxyXG4uY3JlYXRlLWJ1dHRvbjpob3ZlciB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMzMsIDM3LCA0Myk7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbiAgICBmb250LXdlaWdodDogNTUwO1xyXG59XHJcbjwvc3R5bGU+XHJcblxyXG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBeUNBLGlDQUFrQixDQUFDLEFBQ2YsZ0JBQWdCLENBQUUsS0FBSyxDQUN2QixTQUFTLENBQUUsSUFBSSxDQUNmLE1BQU0sS0FBSyxDQUNYLE1BQU0sQ0FBRSxLQUFLLEFBQ2pCLENBQUMsQUFDRCxjQUFjLGVBQUMsQ0FBQyxBQUNaLEtBQUssQ0FBRSxHQUFHLENBQ1YsTUFBTSxDQUFFLElBQUksQ0FDWixVQUFVLENBQUUsTUFBTSxDQUNsQixXQUFXLENBQUUsSUFBSSxDQUNqQixZQUFZLENBQUUsSUFBSSxDQUNsQixPQUFPLENBQUUsS0FBSyxDQUNkLFVBQVUsQ0FBRSxHQUFHLEFBRW5CLENBQUMsQUFFRCw2QkFBYyxNQUFNLEFBQUMsQ0FBQyxBQUNsQixnQkFBZ0IsQ0FBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUNqQyxLQUFLLENBQUUsS0FBSyxDQUNaLFdBQVcsQ0FBRSxHQUFHLEFBQ3BCLENBQUMifQ== */
.directoryContainer.svelte-2o9kud{max-height:50vh;overflow-y:scroll;display:flex;flex-direction:column;align-content:flex-start}.directoryContainer.svelte-2o9kud::-webkit-scrollbar{width:12px}.directoryContainer.svelte-2o9kud::-webkit-scrollbar-thumb:hover{background-color:#e28e2d;transition:background-color 2s ease-in-out}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmlsZURpci5zdmVsdGUiLCJzb3VyY2VzIjpbIkZpbGVEaXIuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+ICBcclxuICAgIGltcG9ydCBGaWxlVGVzdCBmcm9tICcuL0ZpbGVUZXN0LnN2ZWx0ZSc7ICAgIFxyXG4gICAgaW1wb3J0IHsgb25Nb3VudCwgb25EZXN0cm95LCBhZnRlclVwZGF0ZX0gZnJvbSAnc3ZlbHRlJztcclxuICAgIGltcG9ydCBEaXJlY3RvcnlEYXRhIGZyb20gJy4uL1V0aWxpdGllcy9EaXJlY3RvcnlTdG9yZSc7XHJcbiAgICBjb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XHJcbiAgICBsZXQgc2F2ZWRUcmVlID0gW107XHJcbiAgICB2YXIgcmVtb3RlID0gd2luZG93LnJlcXVpcmUoJ2VsZWN0cm9uJykucmVtb3RlO1xyXG4gICAgdmFyIGVsZWN0cm9uRnMgPSByZW1vdGUucmVxdWlyZSgnZnMnKTtcclxuICAgIGNvbnN0IHtpcGNSZW5kZXJlcn0gPSByZXF1aXJlKCdlbGVjdHJvbicpO1xyXG5cclxuICAgIFxyXG4gICAgbGV0IGRpcmVjdG9yeTtcclxuICAgIGxldCByZW5hbWU7XHJcbiAgICBsZXQgc3RhdGVPYmo7XHJcbiAgICBsZXQgcmVzdWx0QXJyID0gW107XHJcbiAgICBsZXQgZnNUaW1lb3V0O1xyXG4gICAgXHJcblxyXG4gICAgY29uc3QgdW5zdWIgPSBEaXJlY3RvcnlEYXRhLnN1YnNjcmliZShkYXRhID0+e1xyXG4gICAgICAgIHJlbmFtZSA9IGRhdGEucmVuYW1lO1xyXG4gICAgICAgIHN0YXRlT2JqID0gZGF0YS5zdGF0ZU9iajtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIHN0b3JlIFxyXG4gICAgb25Nb3VudCAoKCk9PntcclxuICAgIFxyXG4gICAgfSk7XHJcblxyXG4gICAgYWZ0ZXJVcGRhdGUoKCkgPT4ge1xyXG4gICAgICAgIGlmKGRpcmVjdG9yeSkge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdkaXJlY3RvcnknLCBkaXJlY3RvcnkpO1xyXG4gICAgICAgIGZzLndhdGNoKGRpcmVjdG9yeVswXSwgKGV2ZW50VHlwZSwgZmlsZW5hbWUpID0+IHtcclxuICAgICAgICAgICAgaWYoZXZlbnRUeXBlID09PSAncmVuYW1lJyAmJiAhZnNUaW1lb3V0KXsgIFxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJyBJTiBSVU4gQlVJTEQnKTtcclxuICAgICAgICAgICAgICAgIHJlYWRGaWxlTmFtZXMoZGlyZWN0b3J5KTsgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZighZnNUaW1lb3V0KXtcclxuICAgICAgICAgICAgZnNUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsgZnNUaW1lb3V0PW51bGwgfSwgNTAwMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgIH0pO1xyXG4gXHJcbiAgICBvbkRlc3Ryb3koKCk9PntcclxuICAgICAgICB1bnN1YigpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXBjUmVuZGVyZXIub24oJ2ZvbGRlci1vcGVuZWQnLCBmdW5jdGlvbiAoZXZ0LCBmaWxlLCBjb250ZW50KSB7XHJcbiAgICAgICAgZGlyZWN0b3J5ID0gY29udGVudDtcclxuICAgICAgICBpZiAoZGlyZWN0b3J5ICYmIGRpcmVjdG9yeVswXSl7ICAgICAgICBcclxuICAgICAgICAgICAgICAgIHZhciBmaWxlVHJlZSA9IG5ldyBGaWxlVHJlZShkaXJlY3RvcnlbMF0pOyAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBmaWxlVHJlZS5idWlsZCgpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBzYXZlZFRyZWUgPSBmaWxlVHJlZS5pdGVtcztcclxuICAgICAgICAgICAgICAgIHNhdmVkVHJlZS5zb3J0KChhLGIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYi5pdGVtcy5sZW5ndGggLSBhLml0ZW1zLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICBEaXJlY3RvcnlEYXRhLnVwZGF0ZShjdXJyZW50RGF0YSA9PntcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5jdXJyZW50RGF0YSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZVRyZWU6IHNhdmVkVHJlZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKEFycmF5LmlzQXJyYXkoc2F2ZWRUcmVlKSlcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdmaWxlVHJlZScsc2F2ZWRUcmVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgfSlcclxuXHJcblxyXG5cclxuXHJcbiAgICBcclxuXHJcblxyXG4gICAgLy9tZXRob2QgdG8gcmVhZCBhbGwgdGhlIGZpbGVzIGluc2lkZSB0aGUgZGlyZWN0b3J5XHJcbiAgICBjb25zdCByZWFkRmlsZU5hbWVzID0gKGRpcmVjdG9yeSkgPT4ge1xyXG4gICAgICAgIHZhciBmaWxlVHJlZSA9IG5ldyBGaWxlVHJlZShkaXJlY3RvcnlbMF0pOyAgICAgICAgXHJcbiAgICAgICAgZmlsZVRyZWUuYnVpbGQoKTtcclxuICAgICAgICBcclxuICAgICAgICBzYXZlZFRyZWUgPSBmaWxlVHJlZS5pdGVtcztcclxuICAgICAgICBzYXZlZFRyZWUuc29ydCgoYSxiKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBiLml0ZW1zLmxlbmd0aCAtIGEuaXRlbXMubGVuZ3RoO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgRGlyZWN0b3J5RGF0YS51cGRhdGUoY3VycmVudERhdGEgPT57XHJcbiAgICAgICAgICAgIHJldHVybiBzYXZlZFRyZWU7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuICAgIFxyXG4gICAgY2xhc3MgRmlsZVRyZWUge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKHBhdGgsIG5hbWUgPSBudWxsKXtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHRoaXMucGF0aCA9IHBhdGg7XHJcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgICAgIHRoaXMuaXRlbXMgPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgICAgIHBhdGggOiBwYXRoLFxyXG4gICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcclxuICAgICAgICAgICAgICAgIGl0ZW1zOiBbXSxcclxuICAgICAgICAgICAgICAgIGNvbG9yIDogJ3doaXRlJyxcclxuICAgICAgICAgICAgICAgIGlzT3BlbiA6IGZhbHNlXHJcbiAgICAgICAgICAgIH0gICBcclxuICAgICAgICAgICAgLy90aGlzLmhhbmRsZVRvZ2dsZSA9IHRoaXMuaGFuZGxlVG9nZ2xlLmJpbmQodGhpcyk7XHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2codGhpcy5zdGF0ZS5pc09wZW4pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL21ldGhvZCB0byBidWlsZCBmaWxlIHRyZWVcclxuICAgICAgICBidWlsZCAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXRlbXMgPSBGaWxlVHJlZS5yZWFkRGlyKHRoaXMucGF0aCwnJywwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3RhdGljIHJlYWREaXIocGF0aCkge1xyXG4gICAgICAgICAgICB2YXIgZmlsZUFycmF5ID0gW107ICAgICAgICBcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGVsZWN0cm9uRnMucmVhZGRpclN5bmMocGF0aCkuZm9yRWFjaChmaWxlID0+IHtcclxuICAgICAgICAgICAgICAgIHZhciBmaWxlSW5mbyA9IG5ldyBGaWxlVHJlZShgJHtwYXRofS8ke2ZpbGV9YCwgZmlsZSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RhdCA9IGVsZWN0cm9uRnMuc3RhdFN5bmMoZmlsZUluZm8ucGF0aCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGZpbGUuc3BsaXQoJy4nKS5wb3AoKSA9PT0gJ3N2ZWx0ZScpe1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGAke3BhdGh9LyR7ZmlsZX1gKVxyXG4gICAgICAgICAgICAgICAgICAgIGlmKHBhdGguaW5jbHVkZXMoJ25vZGVfbW9kdWxlcycpICE9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50ID0gZnMucmVhZEZpbGVTeW5jKGAke3BhdGh9LyR7ZmlsZX1gKS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhjb250ZW50KVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZUFyciA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGNvbnRlbnQuc3BsaXQoL1xccj9cXG4vKTtcclxuICAgICAgICAgICAgICAgICAgICBpZih2YWx1ZSAhPT1bXCJcIl0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUuZm9yRWFjaCggZWwgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZWwgJiYgZWwuaW5jbHVkZXMoJ2V4cG9ydCcpKSB7ICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbCA9IGVsLnJlcGxhY2UoL1xccy9nLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZWwuaW5jbHVkZXMoJ2V4cG9ydGxldCcpKSBlbCA9IGVsLnJlcGxhY2UoJ2V4cG9ydGxldCcsJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGVsLmluY2x1ZGVzKCdleHBvcnRjb25zdCcpKSBlbCA9IGVsLnJlcGxhY2UoJ2V4cG9ydGNvbnN0JywnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVBcnIucHVzaChlbC5yZXBsYWNlKCc7JywnJykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTdWNlc3MgZmluZGluZyBleHBvcnQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhzdGF0ZUFycikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlT2JqW2ZpbGVdID0gc3RhdGVBcnI7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRGlyZWN0b3J5RGF0YS51cGRhdGUoY3VycmVudERhdGEgPT57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uY3VycmVudERhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlT2JqXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdmaWxlJywgZmlsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhdC5pc0RpcmVjdG9yeSgpKXtcclxuICAgICAgICAgICAgICAgICAgICBmaWxlSW5mby5pdGVtcyA9IEZpbGVUcmVlLnJlYWREaXIoZmlsZUluZm8ucGF0aCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZmlsZUFycmF5LnB1c2goZmlsZUluZm8pO1xyXG4gICAgICAgICAgICB9KSAgIFxyXG4gICAgICAgICAgICByZXR1cm4gZmlsZUFycmF5O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuPC9zY3JpcHQ+XHJcblxyXG48IS0tIEhUTUwgLS0+XHJcblxyXG48ZGl2IGNsYXNzPWRpcmVjdG9yeUNvbnRhaW5lcj5cclxuICAgIHsjaWYgZGlyZWN0b3J5fSBcclxuICAgIDxGaWxlVGVzdCBkaXJlY3Rvcnk9e2RpcmVjdG9yeVswXX0gZmlsZVRyZWU9e3NhdmVkVHJlZX0gLz5cclxuICAgIHsvaWZ9XHJcbjwvZGl2PlxyXG48IS0tIENTUyAtLT5cclxuPHN0eWxlPlxyXG4gICAgLmRpcmVjdG9yeUNvbnRhaW5lcntcclxuICAgICAgICBtYXgtaGVpZ2h0OiA1MHZoO1xyXG4gICAgICAgIG92ZXJmbG93LXk6IHNjcm9sbDtcclxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgICAgICAgYWxpZ24tY29udGVudDogZmxleC1zdGFydDtcclxuICAgIH1cclxuICAgIC5kaXJlY3RvcnlDb250YWluZXI6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcclxuICAgIHdpZHRoOiAxMnB4O1xyXG59XHJcblxyXG4vKiAuZGlyZWN0b3J5Q29udGFpbmVyOjotd2Via2l0LXNjcm9sbGJhci10cmFjazpob3ZlciB7XHJcbiAgICAtd2Via2l0LWJveC1zaGFkb3c6IGluc2V0IDAgMCAzcHggcmdiYSgwLCAwLCAwLCAwLjMpOyBcclxuICAgIGJvcmRlci1yYWRpdXM6IDBweDtcclxufSAqL1xyXG5cclxuLmRpcmVjdG9yeUNvbnRhaW5lcjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWI6aG92ZXIge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2UyOGUyZDtcclxuICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMnMgZWFzZS1pbi1vdXQ7XHJcbn1cclxuPC9zdHlsZT5cclxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWdMSSxpQ0FBbUIsQ0FBQyxBQUNoQixVQUFVLENBQUUsSUFBSSxDQUNoQixVQUFVLENBQUUsTUFBTSxDQUNsQixPQUFPLENBQUUsSUFBSSxDQUNiLGNBQWMsQ0FBRSxNQUFNLENBQ3RCLGFBQWEsQ0FBRSxVQUFVLEFBQzdCLENBQUMsQUFDRCxpQ0FBbUIsbUJBQW1CLEFBQUMsQ0FBQyxBQUN4QyxLQUFLLENBQUUsSUFBSSxBQUNmLENBQUMsQUFPRCxpQ0FBbUIseUJBQXlCLE1BQU0sQUFBQyxDQUFDLEFBQ2hELGdCQUFnQixDQUFFLE9BQU8sQ0FDekIsVUFBVSxDQUFFLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxXQUFXLEFBQy9DLENBQUMifQ== */
.liFolderClosed.svelte-1cp72qu{font-size:15px;cursor:pointer;padding:0px 0 5px 25px;list-style:none;background-image:url("./img/folderClosed.svg");background-repeat:no-repeat;background-position:left;background-size:15px}.liFolderOpen.svelte-1cp72qu{font-size:15px;cursor:pointer;display:flex;justify-content:flex-start;padding:10px 0 5px 25px;list-style:none;background-image:url('./img/folderOpen.svg');background-repeat:no-repeat;background-position:left;background-size:15px}.liFiles.svelte-1cp72qu{font-size:15px;cursor:pointer;padding-left:25px;margin-left:20px;margin-top:1px;list-style:none;background-image:url('./img/document.png');background-repeat:no-repeat;background-position:left;background-size:15px}.directory.svelte-1cp72qu{display:flex;flex-direction:column;align-items:flex-start}ul.svelte-1cp72qu{padding-left:10px;margin:5px}input.svelte-1cp72qu{background-color:white}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */
.editor-body.svelte-1m9bhpf.svelte-1m9bhpf{width:100%;height:100vh;overflow:scroll}ul.svelte-1m9bhpf.svelte-1m9bhpf{display:flex;flex-direction:row;overflow:scroll;padding-left:0;margin-top:0;margin-bottom:0;list-style:none;border-bottom:1px solid #dee2e6;border-radius:5px}li.svelte-1m9bhpf.svelte-1m9bhpf{margin-bottom:-1px;background-color:black;color:#fff}.tab-span.svelte-1m9bhpf.svelte-1m9bhpf{border:1px solid transparent;border-top-left-radius:0.25rem;border-top-right-radius:0.25rem;display:flex;flex-direction:row;padding:0 1rem;cursor:pointer;font-size:1em}.tab-span.svelte-1m9bhpf.svelte-1m9bhpf:hover{border-color:#e9ecef #e9ecef #dee2e6}li.active.svelte-1m9bhpf>span.svelte-1m9bhpf{color:#495057;background-color:#fff;border-color:#dee2e6 #dee2e6 #fff}img.svelte-1m9bhpf.svelte-1m9bhpf{height:1em;background-color:inherit;margin-top:3px}.delete-button.svelte-1m9bhpf.svelte-1m9bhpf{margin-left:5px;border-right:black;border-left:black}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */

/*# sourceMappingURL=bundle.css.map */